<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Full Stack Python</title><link>https://www.fullstackpython.com/</link><description></description><atom:link href="https://www.fullstackpython.com/feeds/matt-makai.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 01 Mar 2017 00:00:00 -0500</lastBuildDate><item><title>How to Choose the Right DevOps Tools for You and Your Team</title><link>https://www.fullstackpython.com/choose-right-devops-tools.html</link><description>&lt;p&gt;This blog post contains a loose transcript along with the slides and 
additional resources from my technical talk that will be given at 
&lt;a href="https://developer.oracle.com/code/sanfrancisco"&gt;Oracle Code SF 2017&lt;/a&gt;
and &lt;a href="https://www.meetup.com/DC-continuous-delivery/"&gt;DC Continuous Delivery&lt;/a&gt; 
within the next couple of months.&lt;/p&gt;
&lt;p&gt;Additional resources to learn more about &lt;a href="/deployments.html"&gt;deployments&lt;/a&gt;,
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt; and 
&lt;a href="/devops.html"&gt;DevOps&lt;/a&gt; are listed at the end of the post.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/title-slide.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Title slide for technical talk."&gt;&lt;/p&gt;
&lt;p&gt;Hey folks, my name is Matt Makai. I'm a 
&lt;a href="https://www.twilio.com/blog/2014/02/introducing-developer-evangelist-matt-makai.html"&gt;Developer Evangelist with Twilio&lt;/a&gt;
and the creator of &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/python-swift-love.jpg" width="100%" class="technical-diagram img-rounded" alt="Python and Swift logos with the heart eyes emoji."&gt;&lt;/p&gt;
&lt;p&gt;Over the past couple of years I've been coding mostly in Python and Swift. 
I bring that up because the way we build, deploy and operate applications in 
either ecosystem is different. It would not make sense to forcefully recommend 
a single way to work in your own ecosystem if it is different than the ones I 
work in.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/java-only.jpg" width="100%" class="technical-diagram img-rounded" alt="Java programming language logo."&gt;&lt;/p&gt;
&lt;p&gt;I used to do a ton of Java development. That's how I started my professional
career before I moved mostly into Python and Swift.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/dark-ages.jpg" width="100%" class="technical-diagram img-rounded" alt="2004, the dark ages of software development?"&gt;&lt;/p&gt;
&lt;p&gt;Back in my own software development dark ages of 2004, I learned about a
concept that got me interested in DevOps before it was called DevOps: 
&lt;a href="/source-control.html"&gt;source control&lt;/a&gt;, also known as version control. We don't 
talk much about source control being a DevOps tool, but it really
is the foundational layer for everything you want to automate with code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/different-versions.jpg" width="100%" class="technical-diagram img-rounded" alt="Diff two commits on GitHub."&gt;&lt;/p&gt;
&lt;p&gt;Nowadays we have amazing open source distributed version control systems
and beautiful web application front ends to visualize our code changes over
time. Yet there is still a small percentage of developers who don't use source
control.&lt;/p&gt;
&lt;p&gt;It might seem crazy but I know developers at Fortune 500 companies that still
do not use source control! How do you automate building, deploying, testing
and operating your application if you don't even have your files versioned?&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/pat-on-back.jpg" width="100%" class="technical-diagram img-rounded" alt="Give yourself a pat on the back."&gt;&lt;/p&gt;
&lt;p&gt;Let's start off this discussion of DevOps tools with a pat on your own back
if you already use source control. Nice work! We've come a long way as an
industry in the last couple of decades when source control was an exotic 
concept for most developers.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/git-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Git logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-1.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Do you know a developer who strongly recommends a tool after 4+ years?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-2.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What is the difference between a concept and an implementation?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/devops-1-layer.png" width="100%" class="technical-diagram img-rounded" alt="Source control (version control) as bottom layer in DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-3.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Question 3: On a 0 (lowest) -&gt; 10 scale, how amenable is your organization to improving the technical environment?"&amp;gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-4.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Question 4: How many people on your team get stoked about making incremental fixes to your technical environment?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/devops-2-layers.png" width="100%" class="technical-diagram img-rounded" alt="CI, automated tests and app dependencies as layer 2 in DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/continuous-integration-implementations.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Open source and hosted versions of CI, such as Jenkins, GoCD, and StriderCI, along with CircleCI, Travis CI and CodeBuild."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/test-automation.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Test automation concepts and their implementations in Python ecosystem as examples."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/bash.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="$bash."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/python-fabric-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Python Fabric library logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/ansible-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Ansible logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/devops-3-layers.png" width="100%" class="technical-diagram img-rounded" alt="Configuration management and automated deployments in layer 3 of DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/configuration-management-tools.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Configuration management implementations such as Ansible, Chef, Puppet and SaltStack."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/ansible-commands.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Example for Ansible YAML command to install packages through apt."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-5.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many times per day does your team deploy to test? How about production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-6.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many times per day do you want to deploy to test? To production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-7.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What are the top 5 specific impediments to completing automating your deployments?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-8.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Who on your team gets excited about continuous delivery?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-9.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Who on your team is responsible for improving automated deployments and continuous delivery?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/django-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Django logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/devops-4-layers.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Monitoring, logging and measuring in layer 4 of DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-10.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What metrics do you collect that feed into every sprint?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-11.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many days would it take to put a new code library into production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/deploys-2016.jpg" width="100%" class="technical-diagram img-rounded" alt="6,643 deploys per year for Twilio in 2015."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/question-12.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How much money, if any, can you spend to jump start monitoring your environment?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/devops-4-layers.png" width="100%" class="technical-diagram img-rounded" alt="Repeat monitoring, loggin and measuring in 4 layer DevOps slide."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170227-choose-devops-tools/contact-info.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Contact info end slide."&gt;&lt;/p&gt;
&lt;p&gt;My name is Matt Makai and I'm a Developer Evangelist with Twilio, a Python
and Swift developer, as well as the author of 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;. You can get in
touch with me via these channels. Thank you!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 01 Mar 2017 00:00:00 -0500</pubDate><guid>tag:www.fullstackpython.com,2017-02-27:choose-right-devops-tools.html</guid></item><item><title>Creating SSH Keys on macOS Sierra</title><link>https://www.fullstackpython.com/ssh-keys-macos-sierra.html</link><description>&lt;p&gt;&lt;a href="/deployment.html"&gt;Deploying&lt;/a&gt; Python applications typically requires
SSH keys. An SSH key has both a public and a private key file. You can 
use the private key to authenticate when syncing remote &lt;a href="/git.html"&gt;Git&lt;/a&gt; 
repositories, connect to remote &lt;a href="/servers.html"&gt;servers&lt;/a&gt; and automate 
your application's deployments via 
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt; tools like 
Ansible. Let's learn how to generate SSH key pairs on 
&lt;a href="http://www.apple.com/macos/sierra/"&gt;macOS Sierra&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Generating New Keys&lt;/h2&gt;
&lt;p&gt;Bring up a new terminal window on macOS by going into Applications/Utilities
and opening "Terminal".&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170220-ssh-keys-macos/new-terminal.jpg" width="100%" class="technical-diagram img-rounded" alt="New macOS terminal window."&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ssh-keygen&lt;/code&gt; command provides an interactive command line interface for
generating both the public and private keys. Invoke &lt;code&gt;ssh-keygen&lt;/code&gt; with the
following &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-b&lt;/code&gt; arguments to ensure we get a 4096 bit RSA key. Note 
that you &lt;em&gt;must&lt;/em&gt; use a key with 2048 or more bits in macOS Sierra or the
system will not allow you to connect to servers with it.&lt;/p&gt;
&lt;p&gt;Optionally, you can also specify your email address with &lt;code&gt;-C&lt;/code&gt; (otherwise 
one will be generated off your current macOS account):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -t rsa -b &lt;span class="m"&gt;4096&lt;/span&gt; -C my.email.address@company.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first prompt you will see asks where to save the key. However, there are
actually two files that will be generated: the public key and the private 
key. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/Users/matt/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This prompt refers to the private key and whatever you enter will also
generate a second file for the public key that has the same name and &lt;code&gt;.pub&lt;/code&gt; 
appended.&lt;/p&gt;
&lt;p&gt;If you already have a key then specify a new filename. I use many
SSH keys so I oftne name them "test-deploy", "prod-deploy", "ci-server"
along with a unique project name. Naming is one of those hard computer 
science problems, so take some time to come up with a system that works for
you!&lt;/p&gt;
&lt;p&gt;Next you will see a prompt for an optional passphrase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whether or not you want a passphrase depends on how you will use the key.
The system will ask you for the passphrase whenever you use the SSH key,
although 
&lt;a href="http://apple.stackexchange.com/questions/254468/macos-sierra-doesn-t-seem-to-remember-ssh-keys-between-reboots"&gt;macOS can store the passphrase in your system Keychain&lt;/a&gt; 
after the first time you enter it. However, if you are automating deployments 
with a &lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; server like
&lt;a href="/jenkins.html"&gt;Jenkins&lt;/a&gt; then you will not want a passphrase.&lt;/p&gt;
&lt;p&gt;Note that it is impossible to recover a passphrase if it is lost. Keep 
that passphrase safe and secure because otherwise a completely new key would 
have to be generated.&lt;/p&gt;
&lt;p&gt;Enter the passphrase (or just press enter to not have a passphrase) twice.
You'll see some output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;: 
Enter same passphrase again: 
Your identification has been saved in /Users/matt/.ssh/deploy_prod.
Your public key has been saved in /Users/matt/.ssh/deploy_prod.pub.
The key fingerprint is:
SHA256:UnRGH/nzYzxUFS9jjd0wOl1ScFGKgW3pU60sSxGnyHo matthew.makai@gmail.com
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA 4096&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;        ..+o++**@&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . +.o*O.@&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        . oo*&lt;span class="o"&gt;=&lt;/span&gt;B.*&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . .  &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;+ &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . S E. +oo &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . .  .  &lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;              . o&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your SSH key is ready to use!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Now that you have your public and private keys, I recommend building and
deploying some &lt;a href="/web-development.html"&gt;Python web apps&lt;/a&gt; such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/build-first-slack-bot-python.html"&gt;Building your first Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/send-mms-picture-messages-python.html"&gt;Sending picture or video messages via a REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/dial-outbound-phone-calls-python-bottle.html"&gt;Dialing outbound phone calls&lt;/a&gt;
  with the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional &lt;code&gt;ssh-keygen&lt;/code&gt; command resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://testequals.com/2016/09/09/macos-sierra-10-12-ssh-keys/"&gt;SSH keys on macOS Sierra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/170220-create-ssh-keys-macos.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Mon, 20 Feb 2017 00:00:00 -0500</pubDate><guid>tag:www.fullstackpython.com,2017-02-20:ssh-keys-macos-sierra.html</guid></item><item><title>Creating SSH Keys on Ubuntu Linux 16.04 LTS</title><link>https://www.fullstackpython.com/ssh-keys-ubuntu-linux.html</link><description>&lt;p&gt;SSH keys are a necessity for Python development when you are working with
&lt;a href="/git.html"&gt;Git&lt;/a&gt;, connecting to remote servers and automating your
&lt;a href="/deployment.html"&gt;deployments&lt;/a&gt;. Let's walk through how to generate SSH
key pairs, which contain both a public and a private key within a single 
pair, on Ubuntu Linux.&lt;/p&gt;
&lt;h2&gt;Generating the Public and Private Keys&lt;/h2&gt;
&lt;p&gt;Open up a new terminal window in Ubuntu like we see in the following 
screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/170214-ssh-keys-ubuntu/new-ubuntu-terminal.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ssh-keygen&lt;/code&gt; command provides an interactive command line interface for
generating both the public and private keys. Invoke &lt;code&gt;ssh-keygen&lt;/code&gt; with the
following &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-b&lt;/code&gt; arguments to ensure we get a 4096 bit RSA key.
Optionally, you can also specify your email address with &lt;code&gt;-C&lt;/code&gt; (otherwise 
one will be generated off your current Linux account):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -t rsa -b &lt;span class="m"&gt;4096&lt;/span&gt; -C my.email.address@company.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first prompt you will see asks where to save the key. However, there are
actually two files that will be generated: the public key and the private 
key. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/matt/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This prompt refers to the private key and whatever you enter will also
generate a second file for the public key that has the same name and &lt;code&gt;.pub&lt;/code&gt; 
appended.&lt;/p&gt;
&lt;p&gt;If you already have a key, you should specify a new filename. I use many
SSH keys so I typically name them "test-deploy", "prod-deploy", "ci-server"
along with a unique project name. Naming is one of those hard computer 
science problems, so take some time to come up with a system that works for
you and the development team you work with!&lt;/p&gt;
&lt;p&gt;Next you will see a prompt for an optional passphrase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whether or not you want a passphrase depends on how you will use the key.
The system will ask you for the passphrase whenever you use the SSH key 
(although you can 
&lt;a href="http://manpages.ubuntu.com/manpages/zesty/man1/ssh-agent.1.html"&gt;use ssh-agent to store the passphrase&lt;/a&gt; 
after you activate it on a system the first time) so it is more secure.
However, if you are automating deployments with a 
&lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; server like
&lt;a href="/jenkins.html"&gt;Jenkins&lt;/a&gt; then you will not want a passphrase.&lt;/p&gt;
&lt;p&gt;Be aware that it is impossible to recover a passphrase if it is lost. Keep 
that passphrase safe and secure because otherwise a completely new key would 
have to be generated.&lt;/p&gt;
&lt;p&gt;Enter the passphrase (or just press enter to not have a passphrase) twice.
You'll see some output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Your identification has been saved in /home/matt/.ssh/prod_deploy.
Your public key has been saved in /home/matt/.ssh/prod_deploy.pub.
The key fingerprint is:
SHA256:xoCWgk40XfM5mruZQNCVoBKXZ4d0gn09ivVENacb7xw matt@ubuntu
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA 2048&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;.oo*&lt;span class="o"&gt;==&lt;/span&gt;oo..o .    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;.+*.*** &lt;span class="o"&gt;=&lt;/span&gt;  +     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;o+.++&lt;span class="o"&gt;=&lt;/span&gt;.B .o      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;+ .o. +oo  +     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; . . o  S . E    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  .   ..   o .   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   . .      o    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;    . +          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     +           &lt;span class="p"&gt;|&lt;/span&gt;
+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your SSH key is now generated and ready to use!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Now that you have your public and private keys, I recommend setting
up a &lt;a href="/development-environments.html"&gt;Python development environment&lt;/a&gt; with 
one of the following tutorials so you can start coding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/install-redis-use-python-3-ubuntu-1604.html"&gt;How to Use Redis with Python 3 and redis-py on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/postgresql-python-3-psycopg2-ubuntu-1604.html"&gt;Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional &lt;code&gt;ssh-keygen&lt;/code&gt; command resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/xenial/man1/ssh-keygen.1.html"&gt;ubuntu manuals ssh-keygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/170214-create-ssh-keys-ubuntu.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 15 Feb 2017 00:00:00 -0500</pubDate><guid>tag:www.fullstackpython.com,2017-02-14:ssh-keys-ubuntu-linux.html</guid></item><item><title>How to Make Phone Calls in Python</title><link>https://www.fullstackpython.com/make-phone-calls-python.html</link><description>&lt;p&gt;Good old-fashioned phone calls remain one of the best forms of communication
despite the slew of new smartphone apps that have popped up over the past
several years. With just a few lines of Python code plus a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface&lt;/a&gt; 
we can make and receive phone calls from any application. &lt;/p&gt;
&lt;p&gt;Our example calls will say a snippet of text and put all incoming callers 
into a recorded conference call. You can modify the instructions using 
&lt;a href="https://www.twilio.com/docs/api/twiml"&gt;Twilio's TwiML verbs&lt;/a&gt; when you 
perform different actions in your own application's phone calls.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;You should have either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; installed to
build this application. Throughout the post we will also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/making-calls"&gt;phone calling web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twilio's 
  &lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;,
  which is &lt;a href="https://pypi.python.org/pypi/twilio"&gt;available on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can snag all the open source code for this tutorial in the 
&lt;a href="https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls"&gt;python-twilio-example-apps&lt;/a&gt;
GitHub repository under the 
&lt;a href="https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls"&gt;no-framework/phone-calls&lt;/a&gt; directory.
Use and copy the code for your own applications. Everything in that 
repository and in this blog post are open source under the MIT license.&lt;/p&gt;
&lt;h2&gt;Install App Dependencies&lt;/h2&gt;
&lt;p&gt;Our application will use the &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;
to create an HTTP POST request to Twilio's API. The Twilio helper library is 
installable from &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtual 
environment. Open your terminal and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create 
a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv phoneapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Invoke the &lt;code&gt;activate&lt;/code&gt; script within the virtualenv &lt;code&gt;bin/&lt;/code&gt; directory to make 
this virtualenv the active Python executable. Note that you will need to 
perform this step in every terminal window that you want the virtualenv to 
be active.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source phoneapp/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv
to something like &lt;code&gt;(phoneapp) $&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Next use the &lt;code&gt;pip&lt;/code&gt; command to install the 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; package
into the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will have the required dependency ready for project as soon as the 
installation script finishes. Now we can write and execute Python code to 
dial phone numbers.&lt;/p&gt;
&lt;h2&gt;Our Python Script&lt;/h2&gt;
&lt;p&gt;Create a new file named &lt;code&gt;phone_calls.py&lt;/code&gt; and copy or type in the following
lines of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="c"&gt;# Twilio phone number goes here. Grab one at https://twilio.com/try-twilio&lt;/span&gt;
&lt;span class="c"&gt;# and use the E.164 format, for example: &amp;quot;+12025551234&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# list of one or more phone numbers to dial, in &amp;quot;+19732644210&amp;quot; format&lt;/span&gt;
&lt;span class="n"&gt;DIAL_NUMBERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

&lt;span class="c"&gt;# URL location of TwiML instructions for how to handle the phone call&lt;/span&gt;
&lt;span class="n"&gt;TWIML_INSTRUCTIONS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
  &lt;span class="s"&gt;&amp;quot;http://static.fullstackpython.com/phone-calls-python.xml&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# replace the placeholder values with your Account SID and Auth Token&lt;/span&gt;
&lt;span class="c"&gt;# found on the Twilio Console: https://www.twilio.com/console&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ACxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yyyyyyyyyy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dial_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Dials one or more phone numbers from a Twilio phone number.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dialing &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# set the method to &amp;quot;GET&amp;quot; from default POST because Amazon S3 only&lt;/span&gt;
        &lt;span class="c"&gt;# serves GET requests on files. Typically POST would be used for apps&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TWIML_INSTRUCTIONS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dial_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIAL_NUMBERS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few lines that you need to modify in this application before it
will run. First, insert one or more phone numbers you wish to dial into the 
DIAL_NUMBERS list. Each one should be a string, separated by a comma. For
example, &lt;code&gt;DIAL_NUMBERS = ["+12025551234", "+14155559876", "+19735551234"]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;TWILIO_PHONE_NUMBER&lt;/code&gt; and the Account SID and Authentication Token,
found on the &lt;code&gt;client = TwilioRestClient("ACxxxxxxxxxx", "yyyyyyyyyy")&lt;/code&gt; 
line, need to be set. We can get these values from the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt; 
or sign into your existing Twilio account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/161123-python-phone-calls/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;Copy the Account SID and Auth Token from the Twilio Console and paste them 
into your application's code: &lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/161123-python-phone-calls/twilio-console-tokens.png" width="100%" class="technical-diagram img-rounded" alt="Obtain the Account SID and Auth Token from the Twilio Console."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to dial and receive phone calls to 
your own validated phone number. To handle calls from any phone 
number then you need to upgrade your account (hit the upgrade button on the
top navigation bar). &lt;/p&gt;
&lt;p&gt;Once you are signed into your Twilio account, go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt;.
On this screen you can 
&lt;a href="https://www.twilio.com/console/phone-numbers/search"&gt;buy one or more phone numbers&lt;/a&gt;
or click on an existing phone number in your account to configure it.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/161123-python-phone-calls/manage-numbers.jpg" width="100%" class="technical-diagram img-rounded" alt="Manage phone numbers screen."&gt;&lt;/p&gt;
&lt;p&gt;After clicking on a number you will reach the phone number configuration
screen. Paste in the URL with TwiML instructions and change the dropdown from
"HTTP POST" to "HTTP GET". In this post we'll use 
&lt;code&gt;http://static.fullstackpython.com/phone-calls-python.xml&lt;/code&gt;, but that URL 
can be more than just a static XML file. &lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/161123-python-phone-calls/twiml-url-number-screen.jpg" width="100%" class="technical-diagram img-rounded" alt="Twilio phone number configuration screen."&gt;&lt;/p&gt;
&lt;p&gt;The power of Twilio really comes in when that URL is handled by your web 
application so it can dynamically respond with TwiML instructions based on 
the incoming caller number or other properties stored in your database.&lt;/p&gt;
&lt;p&gt;Under the Voice webhook, paste in 
&lt;code&gt;http://static.fullstackpython.com/phone-calls-python.xml&lt;/code&gt; and change the
drop-down to the right from "HTTP POST" to "HTTP GET". Click the "Save" 
button at the bottom of the screen.&lt;/p&gt;
&lt;p&gt;Now try calling your phone number. You should hear the snippet of text
read by the Alice voice and then you will be placed into a conference call.
If no one else calls the number then hold music should be playing.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;We just handled inbound phone calls to our phone number. Now it's time to 
dial outbound phone calls. Make sure your &lt;code&gt;phone_calls.py&lt;/code&gt; file is saved 
and that your virtualenv is still activated and then execute the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python phone_calls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a moment all the phone numbers you write in the &lt;code&gt;DIAL_NUMBERS&lt;/code&gt; list
should light up with calls. Anyone that answers will hear our message read
by the "Alice" voice and then they'll be placed together into a recorded 
conference call, just like when someone dials into the number. &lt;/p&gt;
&lt;p&gt;Here is my inbound phone call:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/161123-python-phone-calls/inbound-call.png" width="100%" class="technical-diagram img-rounded" alt="Receiving an incoming phone call on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;Not bad for just a few lines of Python code!&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now that we know how to make and receive phone calls from a Twilio number 
that follows programmatic instructions we can do a whole lot more in our
applications. Next you can use out one of these tutorials to do more with 
the phone number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;Build a phone-calling Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/masked-numbers/python/flask"&gt;Mask phone numbers for anonymous communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django"&gt;Add call tracking to see metrics for phone calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub as
&lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/161123-make-phone-calls.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 23 Nov 2016 00:00:00 -0500</pubDate><guid>tag:www.fullstackpython.com,2016-11-23:make-phone-calls-python.html</guid></item><item><title>Dialing Outbound Phone Calls with a Bottle Web App</title><link>https://www.fullstackpython.com/dial-outbound-phone-calls-python-bottle.html</link><description>&lt;p&gt;Python web apps built with the &lt;a href="/bottle.html"&gt;Bottle web framework&lt;/a&gt; can 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;send&lt;/a&gt; and 
&lt;a href="/blog/reply-sms-text-messages-python-bottle.html"&gt;receive SMS text messages&lt;/a&gt;.
In this tutorial we will go beyond texting and learn how to dial outbound 
phone calls. The calls will read a snippet of text then play an MP3 file,
but they can then be easily modified to create conference lines and many
other voice features in your Python web apps.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;You should have either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; installed to
create your Bottle app, although Python 3 is recommended for new 
applications. We also need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Bottle
  application while it's running on our local development environment&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/making-calls"&gt;phone calling web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twilio's 
  &lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;,
  which is &lt;a href="https://github.com/twilio/twilio-python"&gt;open source on GitHub&lt;/a&gt; 
  and &lt;a href="https://pypi.python.org/pypi/twilio"&gt;available for download from PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide on setting up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;
if you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; 
configured before continuing on through the remainder of this tutorial.&lt;/p&gt;
&lt;p&gt;You can snag all the open source code for this tutorial in the 
&lt;a href="https://github.com/mattmakai/python-bottle-phone"&gt;python-bottle-phone&lt;/a&gt;
GitHub repository under the 
&lt;a href="https://github.com/mattmakai/python-bottle-phone/tree/master/outbound-calls"&gt;outbound directory&lt;/a&gt;. 
Use and copy the code however you want - it's all open source under the 
MIT license.&lt;/p&gt;
&lt;h2&gt;Installing Our Application Dependencies&lt;/h2&gt;
&lt;p&gt;Our Bottle app needs a helper code library to make it easy to dial outbound
phone calls. Bottle and the Twilio helper library are installable from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. Open your terminal 
and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv bottlephone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;activate&lt;/code&gt; script within the virtualenv, which makes this virtualenv
the active Python installation. Note that you need to do this in every 
terminal window that you want this virtualenv to be used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source bottlephone/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv
to something like &lt;code&gt;(bottlephone) $&lt;/code&gt;. Here is a screenshot of what my
environment looked like when I used the &lt;code&gt;activate&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Next use the &lt;code&gt;pip&lt;/code&gt; command to install the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; and 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; packages
into your virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install bottle twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation script finishes, we will have the required 
dependencies to build our app. Time to write some Python code to dial 
outbound phone calls.&lt;/p&gt;
&lt;h2&gt;Bottle and Twilio&lt;/h2&gt;
&lt;p&gt;Our simple Bottle web app will have three routes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - returns a text string to let us know our Bottle app is running&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/twiml&lt;/code&gt; - responds with &lt;a href="https://www.twilio.com/docs/api/twiml"&gt;TwiML&lt;/a&gt; 
  (a simple subset of XML) that instructs Twilio what to do when someone
  picks up the call to them from our Bottle web app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dial-phone/&amp;lt;outbound_phone_number&amp;gt;&lt;/code&gt;, where "outbound_phone_number" is
  a phone number in the format "+12025551234" - this route uses the Twilio
  helper library to send a POST request to the Twilio Voice API to dial a
  phone  call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can build the structure of our Bottle app and the first route right now.
Create a new file named &lt;code&gt;app.py&lt;/code&gt; with the following contents to start our
app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# plug in account SID and auth token here if they are not already exposed as&lt;/span&gt;
&lt;span class="c"&gt;# environment variables&lt;/span&gt;
&lt;span class="n"&gt;twilio_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;TWILIO_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;TWILIO_NUMBER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;+12025551234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NGROK_BASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://c6c6d4e8.ngrok.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Returns a standard text response to show the app is up and running.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bottle app running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you are in the directory where you created the above &lt;code&gt;app.py&lt;/code&gt;
file. Run the app via the Bottle development server with the following 
command. Make sure your virtualenv is still activated so our code can rely 
on the Bottle code library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see a successful development server start up like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(bottlephone) matt@ubuntu:~/bottlephone$ python app.py 
Bottle v0.12.9 server starting up (using WSGIRefServer())...
Listening on http://127.0.0.1:8000/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is what the development server message looks like in my environment 
on Ubuntu:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/bottle-app-running.png" width="100%" class="technical-diagram img-rounded" alt="Successfully starting the Bottle development server from the command line."&gt;&lt;/p&gt;
&lt;p&gt;Let's test out the app by going to &lt;a href="http://localhost:8000"&gt;localhost:8000&lt;/a&gt;
in the web browser. We should get a simple success message that the app
is running and responding to requests.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/bottle-app-web-browser.png" width="100%" class="technical-diagram img-rounded" alt="Simple success message in the web browser that the Bottle app is running."&gt;&lt;/p&gt;
&lt;p&gt;Next we need to obtain a phone number that our Bottle app can use to 
call other phone numbers.&lt;/p&gt;
&lt;h2&gt;Obtain a Phone Number&lt;/h2&gt;
&lt;p&gt;Our basic Bottle web app is running but what we really want to do is dial
outbound calls - which will be handled by &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt;. 
You can also sign into your existing Twilio account if you already have one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to dial and receive phone calls to 
your own validated phone number. To dial and receive calls from any phone 
number then you need to upgrade your account (hit the upgrade button on the
top navigation bar to do that). Trial accounts are great for initial 
development before your application goes live but upgraded accounts are where
the real power comes in.&lt;/p&gt;
&lt;p&gt;Once you are signed into your Twilio account, go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt;.
On this screen you can 
&lt;a href="https://www.twilio.com/console/phone-numbers/search"&gt;buy one or more phone numbers&lt;/a&gt;
or click on an existing phone number in your account to configure it.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/manage-phone-numbers.png" width="100%" class="technical-diagram img-rounded" alt="Manage phone numbers screen."&gt;&lt;/p&gt;
&lt;p&gt;There is nothing for us to configure right now on the phone number 
configuration page because we are making outbound phone calls for this 
tutorial. Now that we have a phone number in hand, let's add the final bit
of code to our Bottle app to get this app working.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;We need to add two new routes to our Bottle app so it can dial outbound
phone calls. Modify your existing app.py file with the two new functions
below, &lt;code&gt;twiml_response&lt;/code&gt; and &lt;code&gt;outbound_call&lt;/code&gt;. None of the other code in
this file needs to change other than adding those two new functions to
what we wrote in the previous section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# plug in account SID and auth token here if they are not already exposed as&lt;/span&gt;
&lt;span class="c"&gt;# environment variables&lt;/span&gt;
&lt;span class="n"&gt;twilio_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# add your Twilio phone number here&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;TWILIO_NUMBER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;+16093002984&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# plug in your Ngrok Forwarding URL - we&amp;#39;ll set it up in a minute&lt;/span&gt;
&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NGROK_BASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://c6c6d4e8.ngrok.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Returns a standard text response to show the app is up and running.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bottle app running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/twiml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twiml_response&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Provides TwiML instructions in response to a Twilio POST webhook&lt;/span&gt;
&lt;span class="sd"&gt;        event so that Twilio knows how to handle the outbound phone call&lt;/span&gt;
&lt;span class="sd"&gt;        when someone picks up the phone.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sweet, this phone call is answered by your Bottle app!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://api.twilio.com/cowbell.mp3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/dial-phone/&amp;lt;outbound_phone_number&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outbound_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outbound_phone_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Uses the Twilio Python helper library to send a POST request to&lt;/span&gt;
&lt;span class="sd"&gt;        Twilio telling it to dial an outbound phone call from our specific&lt;/span&gt;
&lt;span class="sd"&gt;        Twilio phone number (that phone number must be owned by our&lt;/span&gt;
&lt;span class="sd"&gt;        Twilio account).&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# the url must match the Ngrok Forwarding URL plus the route defined in&lt;/span&gt;
    &lt;span class="c"&gt;# the previous function that responds with TwiML instructions&lt;/span&gt;
    &lt;span class="n"&gt;twilio_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;OUTBOUND_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;BLOG_POST_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/twiml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;phone call placed to &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;outbound_phone_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is just one problem with our current setup if you're developing on
a local environment: Twilio won't be able to reach that &lt;code&gt;/twiml&lt;/code&gt; route. 
We need to deploy our app to a reachable server, or just use a localhost 
tunneling tool like &lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt;. Ngrok provides an external
URL that connects to a port running on your machine. 
&lt;a href="https://ngrok.com/download"&gt;Download and install the Ngrok application&lt;/a&gt; 
that is appropriate for your operating system.&lt;/p&gt;
&lt;p&gt;We run Ngrok locally and expose our Bottle app that is running on 
port 8000. Run this command within the directory where the Ngrok executable is
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./ngrok http 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ngrok will start up and provide us with a Forwarding URL, with both HTTP
and HTTPS versions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/start-ngrok.png" width="100%" class="technical-diagram img-rounded" alt="Ngrok started and running to serve as a localhost tunnel."&gt;&lt;/p&gt;
&lt;p&gt;We can use the Forwarding URL to instruct Twilio how to handle the outbound
phone call when someone picks up. Insert the Ngrok forwarding URL into the
&lt;code&gt;app.py&lt;/code&gt; file where &lt;code&gt;NGROK_BASE_URL&lt;/code&gt; is specified.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/access-ngrok.png" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;If Ngrok is useful to you, make sure to read this 
&lt;a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html"&gt;6 awesome reasons to use Ngrok when testing webhooks post&lt;/a&gt; 
to learn even more about the tool.&lt;/p&gt;
&lt;p&gt;Time to test out our app, let's give it a quick spin.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;Make sure your Bottle development server is still running or re-run it with
the &lt;code&gt;python app.py&lt;/code&gt; command in a shell where your virtualenv is still
activated.&lt;/p&gt;
&lt;p&gt;Bring up the application in a browser, this time test out the phone calling
capabilities. Go to "localhost:8000/dial-phone/my-phone-number", where 
"my-phone-number" is a number in the "+12025551234" format. For example,
here is what happens when I dialed +12023351278:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/phone-call-placed.png" width="100%" class="technical-diagram img-rounded" alt="Dialing an outbound phone call with Bottle."&gt;&lt;/p&gt;
&lt;p&gt;And here is the inbound phone call!&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/inbound-call.png" width="100%" class="technical-diagram img-rounded" alt="Receiving an incoming phone call on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;When we pick up the phone call we also see the &lt;code&gt;/twiml&lt;/code&gt; route get called via
Ngrok.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160830-phone-calls-bottle/ngrok-twiml.png" width="100%" class="technical-diagram img-rounded" alt="/twiml route being called via Ngrok."&gt;&lt;/p&gt;
&lt;p&gt;With just two routes in our Bottle app and Twilio we were able to make
outbound phone calls. Not bad!&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Sweet, we can now dial outbound phone calls to &lt;em&gt;any&lt;/em&gt; phone number from
our Bottle web application. Next you may want to try one of these tutorials 
to add even more features to your app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade your &lt;a href="/blog/reply-sms-text-messages-python-bottle.html"&gt;Bottle app to also send and respond to text messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;phone-calling Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django"&gt;call tracking&lt;/a&gt;
  for both inbound and outbound phone calls made through your app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub as
&lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160830-phone-calls-bottle.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Thu, 27 Oct 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-08-30:dial-outbound-phone-calls-python-bottle.html</guid></item><item><title>Python for Entrepreneurs</title><link>https://www.fullstackpython.com/python-entrepreneurs.html</link><description>&lt;p&gt;&lt;a href="https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course"&gt;Python for Entrepreneurs&lt;/a&gt;
is a new video course by the creators of 
&lt;a href="https://talkpython.fm/"&gt;Talk Python to Me&lt;/a&gt; and 
&lt;a href="https://fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are creating this course and running a Kickstarter for it based on 
feedback that it's still too damn difficult to turn basic Python programming 
knowledge into a business to generate income as a side or full time project. 
Both Michael and I have been able to make that happen for ourselves and we 
want to share every difficult lesson we've learned through this course.&lt;/p&gt;
&lt;p&gt;The Python for Entrepreneurs videos and content will dive into building 
and deploying a real-world web application, marketing it to prospective 
customers, handling search engine optimization, making money through credit 
card payments, getting help from part-time contractors for niche tasks and 
scaling up to meet traffic demands.&lt;/p&gt;
&lt;p&gt;If this course hits the mark for what you want to do with Python,
&lt;a href="https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course"&gt;check out the Kickstarter&lt;/a&gt; - we've 
set up steep discounts for early backers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: The Kickstarter is now closed - Michael and I are hard at work
on the course content. Thank you to everyone who supported us as a backer!&lt;/p&gt;
&lt;p&gt;If you have any questions, please reach out to 
&lt;a href="https://twitter.com/mkennedy"&gt;Michael Kennedy&lt;/a&gt; 
or me, &lt;a href="https://twitter.com/mattmakai"&gt;Matt Makai&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Mon, 22 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-07-30:python-entrepreneurs.html</guid></item><item><title>Setting Up Python 3, Django &amp; Gunicorn on Linux Mint 17.3</title><link>https://www.fullstackpython.com/python-3-django-gunicorn-linux-mint-17.html</link><description>&lt;p&gt;Linux Mint 17.3 "Rosa" is December 2015 release of the polished and 
widely-used Linux distribution. This Mint release includes both Python 2.7 
and 3.4 by default, but in this tutorial we will download and install the 
latest Python 3.5.1 version to run our Django application. &lt;/p&gt;
&lt;p&gt;If you want to use a different Linux distribution such as 
&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; instead of Mint, check out
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;the tutorial for Ubuntu 16.04 "Xenial Xerus"&lt;/a&gt;. If Mint is your desired 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; though, let's
get started!&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our setup will use several system packages and code libraries to get
up and running. Do not worry about installing these dependencies just yet, 
we will get to them as we progress through the tutorial. The tools and 
their current versions as of June 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.linuxmint.com/?p=2947"&gt;Linux Mint 17.3 "Rosa"&lt;/a&gt; with the 
  default Cinnamon desktop&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://www.python.org/downloads/release/python-351/"&gt;3.5.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework version 
  &lt;a href="https://docs.djangoproject.com/en/1.9/releases/1.9/"&gt;1.9.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are on Mac OS X or Windows, my recommendation is to use 
virtualization software such as 
&lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="https://www.linuxmint.com/download.php"&gt;Linux Mint Cinnamon desktop .iso&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We should see a desktop screen like this one when we boot up the operating 
system for the first time.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/mint-desktop.jpg" width="100%" class="technical-diagram img-rounded" alt="Linux Mint default desktop"&gt;&lt;/p&gt;
&lt;p&gt;Open up terminal to proceed with the configuration.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the Python version Linux Mint comes with, as well as where its
executable is stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;output&lt;/em&gt; of those two commands should be (these are not commands to run):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Python 3.4.3
/usr/bin/python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded" alt="Output of 'python --version' and 'which python3' commands."&gt;&lt;/p&gt;
&lt;p&gt;We really want to use the latest Python release instead of the default 3.4
when starting a new Python project, so let's download and install 3.5.1 now.&lt;/p&gt;
&lt;p&gt;Run these commands in the terminal to download Python 3.5.1 source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ~/Downloads
wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/download-python.png" width="100%" class="technical-diagram img-rounded" alt="wget Python source code output."&gt;&lt;/p&gt;
&lt;p&gt;Extract the Python source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tar -xvf Python-3.5.1.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux Mint is not configured by default to build the Python source code. We
need to update our system package lists and install several packages to 
make building the Python source code possible. If you have a password on 
your user account, enter it when prompted to allow the installation to 
proceed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt update
sudo apt install build-essential checkinstall
sudo apt install libreadline-gplv2-dev libncursesw5-dev libssl-dev 
sudo apt install libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
sudo apt install python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the packages are installed, we can configure and install Python from
source.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd Python-3.5.1
./configure
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test that the installation worked properly by starting up the Python REPL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the REPL starts up properly with Python 3.5.1 in the output then we're
good to go.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/python351-output.png" width="100%" class="technical-diagram img-rounded" alt="wget Python source code output."&gt;&lt;/p&gt;
&lt;p&gt;The basic system packages we need are now installed so we can proceed to
our Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtual environment and pip&lt;/h2&gt;
&lt;p&gt;Python 3.5 comes with the virtual environment and pip applications so we 
can use them to handle our
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a directory to store virtual environments then create a virtualenv
for our Django project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
python3.5 -m venv djangoproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/djangoproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our virtual environment is properly activated when we see &lt;code&gt;(djangoproj)&lt;/code&gt;
prepended to our prompt. &lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded" alt="Output from the virtualenv environment activation."&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv with Python 3.5.1 is activated so we can install whatever
dependencies we want, such as Django and Gunicorn. Our default &lt;code&gt;python&lt;/code&gt;
command is also set to use the Python 3.5.1 installation instead of the
Python 2.7 version that comes with Linux Mint.&lt;/p&gt;
&lt;h2&gt;Django and Gunicorn&lt;/h2&gt;
&lt;p&gt;Now we can install Django and Green Unicorn into our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django==1.9.7 gunicorn==19.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there are no errors in the pip output then that is a good sign we can 
proceed.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded" alt="Django and Gunicorn properly install via the pip command."&gt;&lt;/p&gt;
&lt;p&gt;Create a new Django project named &lt;code&gt;djangoproj&lt;/code&gt;, or whatever you want to name
your project. Change into the directory for the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ~
django-admin startproject djangoproj
cd djangoproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run Django using the development server with the 
&lt;code&gt;python manage.py runserver&lt;/code&gt; command. However, start Django up with
Gunicorn instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn djangoproj.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded" alt="Result of running gunicorn djangoproj.wsgi on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Awesome, we can bring up our shell project in the web browser at
the &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; or 
&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160626-mint-django-gunicorn/it-works.png" width="100%" class="technical-diagram img-rounded" alt="Django project running in the Firefox web browser."&gt;&lt;/p&gt;
&lt;p&gt;Now you're ready for Django development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Those are the first few steps for beginning development with 
&lt;a href="/django.html"&gt;Django&lt;/a&gt; and &lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; on 
Linux Mint 17.3 "Rosa". If you need an even more in-depth walkthrough for 
deploying your Python web application to a production environment, check 
out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To figure out what to do next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160626-django-gunicorn-mint-linux-17.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Fri, 22 Jul 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-06-26:python-3-django-gunicorn-linux-mint-17.html</guid></item><item><title>Configuring Python 3, Pyramid and Gunicorn on Ubuntu 16.04</title><link>https://www.fullstackpython.com/python-3-pyramid-gunicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Canonical's Ubuntu 16.04 Long Term Support (LTS)&lt;/a&gt; Linux
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt;, also known as "Xenial Xerus",
was released in April 2016. It is the first Ubuntu release to include 
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; instead of Python 2 as its default Python 
installation.&lt;/p&gt;
&lt;p&gt;The &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt; web framework has long supported Python 3.
With just a few short steps we can start a new &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt; 
project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; on Ubuntu 16.04.&lt;/p&gt;
&lt;h2&gt;Required Tools&lt;/h2&gt;
&lt;p&gt;Our project requires Ubuntu 16.04 plus several code libraries. You do not
need to install these tools yet - we will get to them in turn as the
walkthrough progresses. Our requirements and their current versions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python version 3.5&lt;/a&gt; (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/pyramid.html"&gt;Pyramid web framework&lt;/a&gt; version 
  &lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/"&gt;1.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pylonsproject.org/projects/waitress/en/latest/"&gt;Waitress&lt;/a&gt;
  version 0.9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are developing on Mac OS X or Windows, you can use
virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. While creating this I used the amd64 version. &lt;/p&gt;
&lt;p&gt;A desktop screen like this one appears when you boot up Ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open a new terminal window so we can be ready to install required system 
packages.&lt;/p&gt;
&lt;h2&gt;Install System Packages&lt;/h2&gt;
&lt;p&gt;The precise Python version can be shown using the &lt;code&gt;python&lt;/code&gt; command with the
&lt;code&gt;--version&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also view where the &lt;code&gt;python3&lt;/code&gt; program is installed on Ubuntu using the
&lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu requires a few system packages before we can properly install Pyramid
and Gunicorn. When we run the &lt;code&gt;apt&lt;/code&gt; command to install system packages we 
will be prompted for the superuser password. Restricted system access is 
necessary to modify files within the system folders.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;y&lt;/code&gt; then return to let the system package installation run.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The required system packages are installed. We can now install the
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Set up a virtual environment&lt;/h2&gt;
&lt;p&gt;Create a directory for the virtual environments. Then create a new virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
/usr/bin/python3 -m venv venvs/pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/pyramidproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtual environment to
something like &lt;code&gt;(pyramidproj) matt@ubuntu:~$&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtual environment is activated with Python 3.&lt;/p&gt;
&lt;p&gt;We should update pip and venv to the latest versions in our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install --upgrade pip setuptools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can install whatever dependencies we want, in our case Pyramid and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Install Python Packages&lt;/h2&gt;
&lt;p&gt;We can install Pyramid, Gunicorn and Waitress into our virtual environment using 
the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pip install &amp;quot;pyramid==1.7&amp;quot; gunicorn waitress
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors like we see in the following screenshot is a good sign.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Pyramid comes with a project starter template creation tool named &lt;code&gt;pcreate&lt;/code&gt;.
Run &lt;code&gt;pcreate&lt;/code&gt; to generate the boilerplate for a new Pyramid project named
"pyramidproj".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pcreate -s starter pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;cd&lt;/code&gt; (change directory) command to move into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ~/pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A slew of new files have been created within the "pyramidproj" directory.
These are the basic files you can customize for the web application you want
to build. A good resource for understanding and modifying these files is
to follow the 
&lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/quick_tutorial/index.html"&gt;quick tutorial for Pyramid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For now, we just want to use Gunicorn to run our starter pyramidproj app.
Install pyramidproj into your virtual environment using the &lt;code&gt;python&lt;/code&gt; command on
&lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python setup.py develop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can run our app with Gunicorn. Pyramid is a 
&lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/latest/api/paster.html"&gt;paste&lt;/a&gt;-compatible
framework, so we use the &lt;code&gt;--paste&lt;/code&gt; argument to run the WSGI server with
the "development.ini" configuration file. In addition, the &lt;code&gt;-b&lt;/code&gt; argument 
tells Gunicorn which port number to bind on when the server starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn --paste development.ini -b :8080
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Cool, we can bring up our starter Pyramid project up in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160619-ubuntu-pyramid-gunicorn/it-works.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Time to develop a full-fledged web application with &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ready to Develop with Pyramid&lt;/h2&gt;
&lt;p&gt;Now you have a simple setup to develop Pyramid web apps using Gunicorn as
the &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt; on Ubuntu 16.04. If you need a
full step-by-step tutorial to deploy your Python web application to a
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To decide what to do next with your Python project, check out the
&lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160619-pyramid-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-06-19:python-3-pyramid-gunicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>Replying to SMS Text Messages with Python and Bottle</title><link>https://www.fullstackpython.com/reply-sms-text-messages-python-bottle.html</link><description>&lt;p&gt;Python applications can 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;easily send SMS&lt;/a&gt; 
by using a &lt;a href="/application-programming-interfaces.html"&gt;web API&lt;/a&gt;. 
Web apps built with the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; framework can also reply
to incoming text messages by handling inbound HTTP POST webhooks. In
this post we'll quickly walk through how to set up a Bottle web app to
handle SMS data in the form of HTTP POST requests.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;This tutorial works with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;, 
although Python 3 is recommended by the community for new applications. 
Install one of those two Python versions on your system to use for this
walkthrough. We also need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Bottle
  application while it's running on our local development environment&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.python.org/pypi/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the guide on 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;
if you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; 
configured.&lt;/p&gt;
&lt;h2&gt;Application Dependency Installation&lt;/h2&gt;
&lt;p&gt;Our application will use a helper code library to reply to inbound SMS.
Bottle and the helper library are installable from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. Open your terminal 
and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv replysms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Invoke the virtualenv's &lt;code&gt;activate&lt;/code&gt; script, which makes it the "active" 
Python installation. Note that you need to do this in every terminal window
that you want this virtualenv to be used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source replysms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;pip&lt;/code&gt; command to install the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; and 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; packages
into your virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install bottle twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have installed the required dependencies so now Python code that is run 
with the virtualenv activated will be able to use those packages. It's time 
to build our Bottle web app and reply to incoming text messages.&lt;/p&gt;
&lt;h2&gt;Coding Our Bottle App&lt;/h2&gt;
&lt;p&gt;The Bottle web app will have two routes. One route will allow us to test
that the app is running. The other route will handle and respond to incoming
HTTP POST requests from Twilio. Create a new file named &lt;code&gt;app.py&lt;/code&gt; in your 
in the directory where you want to store this Python project.&lt;/p&gt;
&lt;p&gt;Write the following code in the new &lt;code&gt;app.py&lt;/code&gt; file. There is also
&lt;a href="https://gist.github.com/mattmakai/6ec3b46e40a1020a3ea9c772c601199a"&gt;a GitHub Gist&lt;/a&gt; 
with the code that you can copy and paste.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# returns a simple string stating the app is working&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inbound_sms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;twiml_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# grab message from the request. could also get the &amp;quot;To&amp;quot; and &lt;/span&gt;
    &lt;span class="c"&gt;# &amp;quot;From&amp;quot; phone numbers as well from parameters with those names&lt;/span&gt;
    &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# we can now use the incoming message text in our Python application&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello from Bottle right back at you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hi! Not quite sure what you meant, but okay.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# we return back the mimetype because Twilio needs an XML response&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The lines starting with &lt;code&gt;#&lt;/code&gt; are comments that give explanations for what
the code lines below them are doing. Bottle web apps define URL routes with 
the &lt;code&gt;@route&lt;/code&gt; and &lt;code&gt;@post&lt;/code&gt; decorators, depending on the type of HTTP request
the route should handle. &lt;/p&gt;
&lt;p&gt;Make sure your virtualenv is still active so that the application can use 
the Bottle and Twilio code libraries we installed earlier. Give the 
application a try by running it with &lt;code&gt;python app.py&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should
see "It works!" on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/bottle-app-local.jpg" width="100%" class="technical-diagram img-rounded" alt="Bottle application running locally on Ubuntu."&gt;&lt;/p&gt;
&lt;p&gt;However, there is an issue with our web app running on our local development
environment. Twilio cannot send a the HTTP POST request to the web app
server unless a localhost tunnel is created.&lt;/p&gt;
&lt;h2&gt;Ngrok Localhost Tunneling&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; is a localhost tunneling tool that bridges
your local development environment to an external URL. 
&lt;a href="https://ngrok.com/download"&gt;Download and install&lt;/a&gt; the Ngrok version that's
appropriate for your operating system.&lt;/p&gt;
&lt;p&gt;We can run Ngrok locally and expose our Bottle app that is running on 
port 5000. Run this command within the directory where the Ngrok executable is
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./ngrok http 5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/start-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Ngrok started and running to serve as a localhost tunnel."&gt;&lt;/p&gt;
&lt;p&gt;Cool, now we can use the Forwarding URL so Twilio can send POST requests
to our application when there is an inbound SMS. Replace the URL in the
text box with your own Forwarding URL, like I did in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/access-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;Now we just need a Twilio phone number that will send POST request to our
application when there is an inbound SMS.&lt;/p&gt;
&lt;h2&gt;Obtain a Phone Number&lt;/h2&gt;
&lt;p&gt;Our Bottle web app's route can respond to incoming POST requests but we
need to use Twilio to have a phone number that will convert the inbound SMS
data into the POST request. In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt;. 
You can also sign into your existing Twilio account if you already have one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send and receive text messages to 
your own validated phone number. To send and reply to SMS to and from any 
phone number then you need to upgrade your account. Trial accounts are 
great for initial development before your application goes live.&lt;/p&gt;
&lt;p&gt;When you sign up, you receive a free Twilio phone number. We can
configure that phone number to forward the SMS information to our web 
application by setting up the response webhook.&lt;/p&gt;
&lt;p&gt;Go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt; 
and click on the phone number you want to configure for replying to 
text messages.&lt;/p&gt;
&lt;p&gt;Scroll down and look for the "Messaging" header. Change the 
"A Message Comes in" text box to input the ngrok Forwarding URL plus 
the "/twilio" route, as shown in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/webhook-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Save" button so that our changes take effect.&lt;/p&gt;
&lt;p&gt;Our application is ready to go - time to give our phone number a try! 
Send "Hello" or whatever text you want to your phone number. Here is what 
the result looks like on my iPhone.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160605-reply-sms-python-bottle/bottle-success.png" width="100%" class="technical-diagram img-rounded" alt="Example screenshot of what SMS replies look like on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;The concise Bottle web app is a good start to build more complicated
programs such as 
&lt;a href="https://www.twilio.com/blog/2014/11/choose-your-own-adventure-presentations-with-reveal-js-python-and-websockets.html"&gt;Choose Your Own Adventure Presentations&lt;/a&gt;
or
&lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;SMS Slack bots&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Awesome, our Bottle application now replies to inbound SMS text
messages! &lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160605-reply-sms-python-bottle.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-06-05:reply-sms-text-messages-python-bottle.html</guid></item><item><title>How to Build Your First Slack Bot with Python</title><link>https://www.fullstackpython.com/build-first-slack-bot-python.html</link><description>&lt;p&gt;&lt;a href="/bots.html"&gt;Bots&lt;/a&gt; are a useful way to interact with chat services such as 
&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;. If you have never built a bot before, this 
post provides an easy starter tutorial for combining the 
&lt;a href="https://api.slack.com/"&gt;Slack API&lt;/a&gt; with Python to create your first bot.&lt;/p&gt;
&lt;p&gt;We will walk through setting up your development environment, obtaining a
Slack API bot token and coding our simple bot in Python.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our bot, which we will name "StarterBot", requires Python and the Slack API.
To run our Python code we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; to handle Python 
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.com/"&gt;Free Slack account&lt;/a&gt; with a team on which you have 
  API access or sign up for the 
  &lt;a href="http://dev4slack.xoxco.com/"&gt;Slack Developer Hangout team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Python 
  &lt;a href="https://github.com/slackhq/python-slackclient"&gt;slackclient&lt;/a&gt; code 
  library built by the Slack team&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com/tokens"&gt;Slack API testing token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also useful to have the &lt;a href="https://api.slack.com/"&gt;Slack API docs&lt;/a&gt; handy 
while you're building this tutorial.&lt;/p&gt;
&lt;p&gt;All the code for this tutorial is available open source under the MIT license
in the &lt;a href="https://github.com/mattmakai/slack-starterbot"&gt;slack-starterbot&lt;/a&gt; public
repository.&lt;/p&gt;
&lt;h2&gt;Establishing Our Environment&lt;/h2&gt;
&lt;p&gt;We now know what tools we need for our project so let's get our development
environment set up. Go to the terminal (or Command Prompt on Windows) and 
change into the directory where you want to store this project. Within 
that directory, create a new virtualenv to isolate our application 
dependencies from other Python projects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv starterbot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source starterbot/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your prompt should now look like the one in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/virtualenv-activate.png" width="100%" class="technical-diagram img-rounded" alt="Command prompt with starterbot's virtualenv activated."&gt;&lt;/p&gt;
&lt;p&gt;The official slackclient API helper library built by Slack can send and 
receive messages from a Slack channel. Install the slackclient library with 
the &lt;code&gt;pip&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install slackclient
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;pip&lt;/code&gt; is finished you should see output like this and you'll be
back at the prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/pip-install-slackclient.png" width="100%" class="technical-diagram img-rounded" alt="Output from using the pip install slackclient command with a virtualenv activated."&gt;&lt;/p&gt;
&lt;p&gt;We also need to obtain an access token for our Slack team so our bot can
use it to connect to the Slack API.&lt;/p&gt;
&lt;h2&gt;Slack Real Time Messaging (RTM) API&lt;/h2&gt;
&lt;p&gt;Slack grants programmatic access to their messaging channels via a
&lt;a href="/application-programming-interfaces.html"&gt;web API&lt;/a&gt;. Go to the 
&lt;a href="https://api.slack.com/"&gt;Slack web API page&lt;/a&gt; and sign up to create your own 
Slack team. You can also sign into an existing account where you have 
administrative privileges.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/sign-in-slack.png" width="100%" class="technical-diagram img-rounded" alt="Use the sign in button on the top right corner of the Slack API page."&gt;&lt;/p&gt;
&lt;p&gt;After you have signed in go to the 
&lt;a href="https://api.slack.com/bot-users"&gt;Bot Users page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/custom-bot-users.png" width="100%" class="technical-diagram img-rounded" alt="Custom bot users webpage."&gt;&lt;/p&gt;
&lt;p&gt;Name your bot "starterbot" then click the “Add bot integration” button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/starterbot.jpg" width="100%" class="technical-diagram img-rounded" alt="Add a bot integration named starterbot."&gt;&lt;/p&gt;
&lt;p&gt;The page will reload and you will see a newly-generated access token. You 
can also change the logo to a custom design. For example, I gave this bot
the Full Stack Python logo.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/slack-token.png" width="100%" class="technical-diagram img-rounded" alt="Copy and paste the access token for your new Slack bot."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Save Integration" button at the bottom of the page. Your bot is 
now ready to connect to Slack's API.&lt;/p&gt;
&lt;p&gt;A common practice for Python developers is to export secret tokens as 
environment variables. Export the Slack token with the name 
&lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export SLACK_BOT_TOKEN=&amp;#39;your slack token pasted here&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice, now we are authorized to use the Slack API as a bot.&lt;/p&gt;
&lt;p&gt;There is one more piece of information we need to build our bot: our bot's 
ID. Next we will write a short script to obtain that ID from the Slack API.&lt;/p&gt;
&lt;h2&gt;Obtaining Our Bot’s ID&lt;/h2&gt;
&lt;p&gt;It is &lt;em&gt;finally&lt;/em&gt; time to write some Python code! We'll get warmed up by coding 
a short Python script to obtain StarterBot's ID. The ID varies based on the 
Slack team. &lt;/p&gt;
&lt;p&gt;We need the ID because it allows our application to determine if messages 
parsed from the Slack RTM are directed at StarterBot. Our script also 
tests that our &lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt; environment variable is properly set. &lt;/p&gt;
&lt;p&gt;Create a new file named &lt;code&gt;print_bot_id.py&lt;/code&gt; and fill it with the following 
code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slackclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;


&lt;span class="n"&gt;BOT_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;starterbot&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;slack_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SLACK_BOT_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;api_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users.list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# retrieve all users so we can find our bot&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;members&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;BOT_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bot ID for &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39; is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;could not find bot user with the name &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our code imports the SlackClient and instantiates it with our 
&lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt;, which we set as an environment variable. When the 
script is executed by the &lt;code&gt;python&lt;/code&gt; command we call the Slack API to list
all Slack users and get the ID for the one that matches the name "starterbot".&lt;/p&gt;
&lt;p&gt;We only need to run this script once to obtain our bot’s ID.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python print_bot_id.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script prints a single line of output when it is run that provides
us with our bot's ID.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/printed-bot-id.png" width="100%" class="technical-diagram img-rounded" alt="Use the Python script to print the Slack bot's ID in your Slack team."&gt;&lt;/p&gt;
&lt;p&gt;Copy the unique ID that your script prints out. Export the ID as an 
environment variable named &lt;code&gt;BOT_ID&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(starterbot)$ export BOT_ID=&amp;#39;bot id returned by script&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script only needs to be run once to get the bot ID. We can now use
that ID in our Python application that will run StarterBot.&lt;/p&gt;
&lt;h2&gt;Coding Our StarterBot&lt;/h2&gt;
&lt;p&gt;We've got everything we need to write the StarterBot code. Create a new file 
named &lt;code&gt;starterbot.py&lt;/code&gt; and include the following code in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slackclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;SlackClient&lt;/code&gt; imports will look familiar because we used them 
in the &lt;code&gt;print_bot_id.py&lt;/code&gt; program.&lt;/p&gt;
&lt;p&gt;With our dependencies imported we can use them to obtain the environment 
variable values and then instantiate the Slack client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# starterbot&amp;#39;s ID as an environment variable&lt;/span&gt;
&lt;span class="n"&gt;BOT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BOT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;# constants&lt;/span&gt;
&lt;span class="n"&gt;AT_BOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;@&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOT_ID&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;do&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# instantiate Slack &amp;amp; Twilio clients&lt;/span&gt;
&lt;span class="n"&gt;slack_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code instantiates the &lt;code&gt;SlackClient&lt;/code&gt; client with our &lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt; 
exported as an environment variable. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    READ_WEBSOCKET_DELAY = 1 # 1 second delay between reading from firehose
    if slack_client.rtm_connect():
        print(&amp;quot;StarterBot connected and running!&amp;quot;)
        while True:
            command, channel = parse_slack_output(slack_client.rtm_read())
            if command and channel:
                handle_command(command, channel)
            time.sleep(READ_WEBSOCKET_DELAY)
    else:
        print(&amp;quot;Connection failed. Invalid Slack token or bot ID?&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Slack client connects to the Slack RTM API WebSocket then constantly 
loops while parsing messages from the firehose. If any of those messages are 
directed at StarterBot, a function named &lt;code&gt;handle_command&lt;/code&gt; determines what 
to do.&lt;/p&gt;
&lt;p&gt;Next add two new functions to parse Slack output and handle commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        Receives commands directed at the bot and determines if they&lt;/span&gt;
&lt;span class="s2"&gt;        are valid commands. If so, then acts on the commands. If not,&lt;/span&gt;
&lt;span class="s2"&gt;        returns back what it needs for clarification.&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not sure what you mean. Use the *&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;EXAMPLE_COMMAND&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
               &lt;span class="s2"&gt;&amp;quot;* command with numbers, delimited by spaces.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EXAMPLE_COMMAND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sure...write some more code then I can do that!&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;slack_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chat.postMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;as_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;parse_slack_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slack_rtm_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        The Slack Real Time Messaging API is an events firehose.&lt;/span&gt;
&lt;span class="s2"&gt;        this parsing function returns None unless a message is&lt;/span&gt;
&lt;span class="s2"&gt;        directed at the Bot, based on its ID.&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;output_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slack_rtm_output&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;output_list&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;output_list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;AT_BOT&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="nx"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;whitespace&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AT_BOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                       &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;channel&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;parse_slack_output&lt;/code&gt; function takes messages from Slack and determines 
if they are directed at our StarterBot. Messages that start with a direct
command to our bot ID are then handled by our code - which is currently
just posts a message back in the Slack channel telling the user to write
some more Python code!&lt;/p&gt;
&lt;p&gt;Here is how the entire program should look when it's all put together
(you can also 
&lt;a href="https://github.com/mattmakai/slack-starterbot/blob/master/starterbot.py"&gt;view the file in GitHub&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slackclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;


&lt;span class="c"&gt;# starterbot&amp;#39;s ID as an environment variable&lt;/span&gt;
&lt;span class="n"&gt;BOT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BOT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# constants&lt;/span&gt;
&lt;span class="n"&gt;AT_BOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;@&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOT_ID&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;do&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# instantiate Slack &amp;amp; Twilio clients&lt;/span&gt;
&lt;span class="n"&gt;slack_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SLACK_BOT_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Receives commands directed at the bot and determines if they&lt;/span&gt;
&lt;span class="sd"&gt;        are valid commands. If so, then acts on the commands. If not,&lt;/span&gt;
&lt;span class="sd"&gt;        returns back what it needs for clarification.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Not sure what you mean. Use the *&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
               &lt;span class="s"&gt;&amp;quot;* command with numbers, delimited by spaces.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sure...write some more code then I can do that!&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chat.postMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_slack_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack_rtm_output&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        The Slack Real Time Messaging API is an events firehose.&lt;/span&gt;
&lt;span class="sd"&gt;        this parsing function returns None unless a message is&lt;/span&gt;
&lt;span class="sd"&gt;        directed at the Bot, based on its ID.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;output_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slack_rtm_output&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;AT_BOT&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="c"&gt;# return text after the @ mention, whitespace removed&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AT_BOT&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; \
                       &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;channel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;READ_WEBSOCKET_DELAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;# 1 second delay between reading from firehose&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rtm_connect&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StarterBot connected and running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_slack_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rtm_read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;READ_WEBSOCKET_DELAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connection failed. Invalid Slack token or bot ID?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that all of our code is in place we can run our StarterBot on the 
command line with the &lt;code&gt;python starterbot.py&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/starterbot-running.png" width="100%" class="technical-diagram img-rounded" alt="Console output when the StarterBot is running and connected to the API."&gt;&lt;/p&gt;
&lt;p&gt;In Slack, create a new channel and invite StarterBot or invite it to an
existing channel.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/create-channel.png" width="100%" class="technical-diagram img-rounded" alt="In the Slack user interface create a new channel and invite StarterBot."&gt;&lt;/p&gt;
&lt;p&gt;Now start giving StarterBot commands in your channel.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160604-simple-python-slack-bot/working-starterbot.png" width="100%" class="technical-diagram img-rounded" alt="Give StarterBot commands in your Slack channel."&gt;&lt;/p&gt;
&lt;p&gt;As it is currently written above in this tutorial, the 
line &lt;code&gt;AT_BOT = "&amp;lt;@" + BOT_ID + "&amp;gt;"&lt;/code&gt; does not require a colon after the 
"@starter" (or whatever you named your particular bot) mention. Previous
versions of this tutorial did have a colon because Slack clients would
auto-insert the ":" but that is no longer the case.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Alright, now you've got a simple StarterBot with a bunch of places in the 
code you can add whatever features you want to build. &lt;/p&gt;
&lt;p&gt;There is a whole lot more that could be done using the Slack RTM API and Python.
Check out these posts to learn what you could do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attach a persistent &lt;a href="/databases.html"&gt;relational database&lt;/a&gt; or 
  &lt;a href="/no-sql-datastore.html"&gt;NoSQL back-end&lt;/a&gt; such as 
  &lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt;, &lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt; or &lt;a href="/sqlite.html"&gt;SQLite&lt;/a&gt;
  to save and retrieve user data&lt;/li&gt;
&lt;li&gt;Add another channel to interact with the bot 
  &lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;via SMS&lt;/a&gt; 
  or 
  &lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;phone calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/api-integration.html"&gt;Integrate other web APIs&lt;/a&gt; such as 
  &lt;a href="https://developer.github.com/v3/"&gt;GitHub&lt;/a&gt;, 
  &lt;a href="https://www.twilio.com/docs"&gt;Twilio&lt;/a&gt; or &lt;a href="https://docs.api.ai/"&gt;api.ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160604-build-first-slack-bot-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Thu, 27 Oct 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-06-04:build-first-slack-bot-python.html</guid></item><item><title>Responding to SMS Text Messages with Python &amp; Flask</title><link>https://www.fullstackpython.com/respond-sms-text-messages-python-flask.html</link><description>&lt;p&gt;Short Message Service (SMS) text messages are 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;easy to send from Python applications&lt;/a&gt; 
with a
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;. 
Flask applications can also receive incoming text messages and respond
back to the sender with just a few lines of Python code.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This tutorial is fine for both Python 2 and 3. Make sure you have one of 
those two versions installed on your system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; micro web framework&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.python.org/pypi/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Flask 
  application while it's running on our local development environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need assistance getting pip and virtualenv installed, take a look at 
the first few steps in the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide, which shows how to install system packages for those tools.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependencies&lt;/h2&gt;
&lt;p&gt;Our code will use a helper library to make it easier to respond to text 
messages from Python. The helper library dependency along with the Flask
code library can be installed from &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into 
a virtualenv. In your terminal use the following command to generate a new 
virtualenv. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv respondsms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source respondsms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after we properly activate the virtualenv
to something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Install Flask and the Twilio Python helper library into the virtualenv with
the &lt;code&gt;pip&lt;/code&gt; command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install flask twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dependencies are installed so that we can use it with our Python code.
Now we can write our Python application.&lt;/p&gt;
&lt;h2&gt;Building Our Flask Web App&lt;/h2&gt;
&lt;p&gt;Our Flask application will have two routes: one to make sure the web app
is running and another that handles incoming HTTP POST requests. Create
a new file named &lt;code&gt;app.py&lt;/code&gt; in your home directory or where you choose to
store your Python project files.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;app.py&lt;/code&gt; write the following code. You can also see 
&lt;a href="https://gist.github.com/mattmakai/8ab434ccb604d3ba5bde817a183e0bde"&gt;this code in a GitHub Gist&lt;/a&gt; 
if that's easier to copy and paste.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# returns a simple string stating the app is working&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/twilio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inbound_sms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# we get the SMS message from the request. we could also get the &lt;/span&gt;
    &lt;span class="c"&gt;# &amp;quot;To&amp;quot; and the &amp;quot;From&amp;quot; phone number as well&lt;/span&gt;
    &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# we can now use the incoming message text in our Python application&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello back to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hi! Not quite sure what you meant, but okay.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# we return back the mimetype because Twilio needs an XML response&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The inline comments on the lines starting with &lt;code&gt;#&lt;/code&gt; explain what the lines
below them do. Flask applications define URL routes with the &lt;code&gt;@app.route&lt;/code&gt;
decorator. Our application needs two routes therefore we have two of those
decorators defined.&lt;/p&gt;
&lt;p&gt;Give the application a try by running it with &lt;code&gt;python app.py&lt;/code&gt;. If you have
trouble running the program, make sure your virtualenv is still active so
that the application can use the Flask and Twilio code libraries we installed
earlier.&lt;/p&gt;
&lt;p&gt;Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should
see "It works!" on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/app-local.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;There is one problem with our application running on our local development
environment: there's no way for our server to receive HTTP POST requests 
unless we use a localhost tunnel.&lt;/p&gt;
&lt;h2&gt;Localhost Tunneling with Ngrok&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; provides a localhost tunnel so that outside
services can connect to a server running in your local development 
environment. Download and install Ngrok.&lt;/p&gt;
&lt;p&gt;We can now run Ngrok locally and connect our Flask app running on port 5000. 
Within the directory where you extracted Ngrok, run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./ngrok http 5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/start-ngrok.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we can use that Ngrok Forwarding URL to access our application
from any machine that has an internet connection. Replace the URL in the
web browser with your own Forwarding URL, like I did in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/access-ngrok.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We just need a phone number that'll hit our application with a POST request
to respond to text messages.&lt;/p&gt;
&lt;h2&gt;Obtaining Our Phone Number&lt;/h2&gt;
&lt;p&gt;We can use our Flask application's route to respond to incoming web API 
requests based on incoming SMS messages to a Twilio phone number. Go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free trial account&lt;/a&gt;
to use their API. If you already have a Twilio account then sign into your 
existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send and receive text messages to 
your own validated phone number. To send and respond to SMS to and from any 
phone number then you need to upgrade your account. Trial accounts are 
great for initial development before your application goes live.&lt;/p&gt;
&lt;p&gt;When you sign up, you receive a free Twilio phone number. We can
configure that phone number to forward the SMS information to our web 
application by setting up the response webhook.&lt;/p&gt;
&lt;p&gt;Go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt; 
and click on the phone number you want to configure for responding to 
inbound text messages.&lt;/p&gt;
&lt;p&gt;Scroll down to near the bottom of the page and look for the "Messaging"
header. Modify the "A Message Comes in" text box so that it has your
ngrok Forwarding URL plus the "/twilio" route, as shown in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/number-configuration.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now press the red "Save" button at the bottom to make our changes take
effect.&lt;/p&gt;
&lt;p&gt;Our application is ready to go - time to give our phone number a try! 
Send "Hello" or whatever text you want to your phone number. Here is what 
the result looks like on my iPhone.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160530-respond-sms-python-flask/success.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;This simple Flask application is a good start to build more complicated
responses such as
&lt;a href="https://www.twilio.com/blog/2014/06/using-natural-language-processing-for-better-sms-interfaces-using-twilio-and-pythons-textblob.html"&gt;adding natural language processing&lt;/a&gt;,
&lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;building SMS Slack bots&lt;/a&gt;
or 
&lt;a href="https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html"&gt;coding SMS-powered NES Game Genies&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Sweet, now our Flask web app automatically responds to incoming SMS text
messages! It's pretty crazy to think that entire businesses such as 
&lt;a href="http://techcrunch.com/2016/03/07/superphone/"&gt;SuperPhone&lt;/a&gt; and 
&lt;a href="https://www.remind.com/"&gt;Remind&lt;/a&gt; are built off code that started out very
similar to the code we just wrote.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160530-respond-sms-text-messages-python-flask.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-30:respond-sms-text-messages-python-flask.html</guid></item><item><title>How to Install and Use MySQL on Ubuntu 16.04</title><link>https://www.fullstackpython.com/install-mysql-ubuntu-1604.html</link><description>&lt;p&gt;&lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt; is a common open source 
&lt;a href="/databases.html"&gt;relational database&lt;/a&gt; for creating, reading, updating 
and deleting data in &lt;a href="/web-frameworks.html"&gt;Python web applications&lt;/a&gt;.
Let's learn how to install MySQL on &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04&lt;/a&gt; and then 
run a few SQL queries within the command line client.&lt;/p&gt;
&lt;p&gt;We will not go over connecting via Python applications using
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt; 
but these steps can be used as a prerequisite to working with an ORM such 
as SQLAlchemy or Peewee.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;In this tutorial we'll use the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04&lt;/a&gt; (this tutorial 
  should also work on other Ubuntu versions)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install MySQL&lt;/h2&gt;
&lt;p&gt;We can install MySQL by using the &lt;code&gt;apt&lt;/code&gt; package manager. First make sure
your packages list are up to date. Open the terminal and run this &lt;code&gt;apt&lt;/code&gt;
command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to install the &lt;code&gt;mysql-server&lt;/code&gt; package, which downloads the required
files, configures the initial database set up and handles running MySQL
as a system service. Run this &lt;code&gt;apt&lt;/code&gt; command to get the process started.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter 'y' when prompted with whether or not you want to install the
new package.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/apt-install-prompt.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;An administrative screen asking for a new root password will appear in the 
middle of the package installation process. Enter your chosen new password 
twice and the installation will continue.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/new-root-password.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;In a moment the installation will finish and you'll be back at the command
prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/apt-finished.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;MySQL is now installed with a root user. However, we do not want to have our
applications connect to the database with that user, so next we will 
create a new non-root user.&lt;/p&gt;
&lt;h2&gt;Securing MySQL&lt;/h2&gt;
&lt;p&gt;MySQL is installed with a basic configuration meant for development and testing
purposes. However, the configuration is not secure for production enviroments,
therefore it comes with a utility to handle basic security. Run the
following command and answer the questions based on your environment 
requirements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you finish running the script you should see the following output and
be back at the command prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/mysql-secure-installation.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our MySQL instance has basic security in place but we need to create a 
non-root user for applications to interact with the database.&lt;/p&gt;
&lt;h2&gt;Creating MySQL Users&lt;/h2&gt;
&lt;p&gt;To create a non-root user, connect to the MySQL instance with the 
&lt;code&gt;mysql&lt;/code&gt; command line client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now use the &lt;code&gt;CREATE USER&lt;/code&gt; command to generate a new user. Make sure to
change "mynewuser" and "goodPassword" with your own values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE USER &amp;#39;mynewuser&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;goodPassword&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No output after the command is good - that means the command succeeded.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/create-user.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We need to apply privileges to the new user so it can handle basic database
operations. Again, make sure to replace the default username in this command
with your new username.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GRANT ALL PRIVILEGES ON * . * TO &amp;#39;mynewuser&amp;#39;@&amp;#39;localhost&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/grant-all.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;It's a good idea to reload the privileges to make sure our new user's
permissions are in place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FLUSH PRIVILEGES;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our permissions are reloaded we can connect with the new user.&lt;/p&gt;
&lt;h2&gt;New User Connection&lt;/h2&gt;
&lt;p&gt;We're set to connect to the database with our new user. Exit the MySQL
client with "Ctrl-d". Reconnect using a slightly different command than
we used earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql -u mynewuser -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/mysql-new-user.png" width="100%" class="technical-diagram img-rounded" alt="Connect to MySQL as the new user we just created."&gt;&lt;/p&gt;
&lt;p&gt;Create a new database with the &lt;code&gt;CREATE DATABASE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE DATABASE fullstackpython;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/create-database.png" width="100%" class="technical-diagram img-rounded" alt="Create a new MySQL database with our new user."&gt;&lt;/p&gt;
&lt;p&gt;Connect to the new database with the &lt;code&gt;USE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;use fullstackpython;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160528-mysql-ubuntu-1604/use-command.png" width="100%" class="technical-diagram img-rounded" alt="Connect to the newly-created database with the USE command."&gt;&lt;/p&gt;
&lt;p&gt;Create a simple new table with the &lt;code&gt;CREATE TABLE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE pages (name VARCHAR(50), url VARCHAR(1024));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our table is ready to go - we can interact with it using the 
&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; SQL commands.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We now have our MySQL instance installed and ready for interaction.
Take a look at the &lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt;, 
&lt;a href="/databases.html"&gt;relational databases&lt;/a&gt; and 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt;
pages for more tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. 
Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160528-install-mysql-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-28:install-mysql-ubuntu-1604.html</guid></item><item><title>Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04</title><link>https://www.fullstackpython.com/postgresql-python-3-psycopg2-ubuntu-1604.html</link><description>&lt;p&gt;&lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt; is a powerful open source 
&lt;a href="/databases.html"&gt;relational database&lt;/a&gt; frequently used to create, read,
update and delete &lt;a href="/web-frameworks.html"&gt;Python web application&lt;/a&gt; data.
&lt;a href="http://pythonhosted.org/psycopg2/"&gt;Psycopg2&lt;/a&gt; is a PostgreSQL database 
driver that serves as a Python client for access to the PostgreSQL server. 
This post explains how to install PostgreSQL on &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04&lt;/a&gt; 
and run a few basic SQL queries within a Python program.&lt;/p&gt;
&lt;p&gt;We won't cover 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt; 
in this tutorial but these steps can be used as a prerequisite to working 
with an ORM such as SQLAlchemy or Peewee.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our walkthrough should work with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; 
although all the steps were tested specifically with Python 3.5. Besides 
the Python interpreter, here are the other components we'll use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04&lt;/a&gt; (these 
  steps should also work fine with other Ubuntu versions)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle the
  &lt;a href="https://pypi.python.org/pypi/psycopg2/2.6.1"&gt;psycopg2&lt;/a&gt; 
  &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren't sure how how to install pip and virtualenv, review the 
first few steps of the 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Bottle and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Install PostgreSQL&lt;/h2&gt;
&lt;p&gt;We'll install PostgreSQL via the &lt;code&gt;apt&lt;/code&gt; package manager. There are a few
packages we need since we want to both run PostgreSQL and use the psycopg2
driver with our Python programs. PostgreSQL will also be installed as a
system service so we can start, stop and reload its configuration when
necessary with the &lt;code&gt;service&lt;/code&gt; command. Open the terminal and run: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install postgresql libpq-dev postgresql-client postgresql-client-common
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your &lt;code&gt;sudo&lt;/code&gt; password when prompted and enter 'yes' when &lt;code&gt;apt&lt;/code&gt; asks
if you want to install the new packages.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/apt-get-postgresql.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;After a few moments &lt;code&gt;apt&lt;/code&gt; will finish downloading, installing and 
processing.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/apt-get-postgresql-done.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We now have PostgreSQL installed and the PostgreSQL service is running
in the background. However, we need to create a user and a database instance
to really start using it. Use the &lt;code&gt;sudo&lt;/code&gt; command to switch to the new
"postgres" account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo -i -u postgres
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the "postgres" account, create a user from the command line with the
&lt;code&gt;createuser&lt;/code&gt; command. PostgreSQL will prompt you with several questions.
Answer "n" to superuser and "y" to the other questions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createuser matt -P --interactive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/createuser.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we have a PostgreSQL user that matches our Ubuntu login
account. Exit out of the postgres account by pressing the "Ctrl" key along
with "d" into the shell. We're back in our own user account.&lt;/p&gt;
&lt;p&gt;Create a new database we can use for testing. You can name it "testpython"
or whatever you want for your application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createdb testpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can interact with "testpython" via the PostgreSQL command line tool.&lt;/p&gt;
&lt;h2&gt;Interacting with PostgreSQL&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;psql&lt;/code&gt; command line client is useful for connecting directly to our
PostgreSQL server without any Python code. Try out &lt;code&gt;psql&lt;/code&gt; by using this
command at the prompt: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The PostgreSQL client will connect to the localhost server. The client is
now ready for input:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/postgresql-cli.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Try out PostgreSQL's command prompt a try with commands such as &lt;code&gt;\dt&lt;/code&gt; and
&lt;code&gt;\dd&lt;/code&gt;. We can also run SQL queries such as "SELECT * from testpython", 
although that won't give us back any data yet because we have not inserted
any into the database. A full list of PostgreSQL commands can be found in the
&lt;a href="http://www.postgresql.org/docs/9.6/static/app-psql.html"&gt;psql documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing psycopg2&lt;/h2&gt;
&lt;p&gt;Now that PostgreSQL is installed and we have a non-superuser account, we
can install the &lt;a href="http://initd.org/psycopg/"&gt;psycopg2&lt;/a&gt; package. Let's
figure out where our &lt;code&gt;python3&lt;/code&gt; executable is located, create a virtualenv
with &lt;code&gt;python3&lt;/code&gt;, activate the virtualenv and then install the psycopg2 package
with &lt;code&gt;pip&lt;/code&gt;. Find your &lt;code&gt;python3&lt;/code&gt; executable using the &lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will see output like what is in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/which-python-3.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new virtualenv in either your home directory or wherever you
store your Python virtualenvs. Specify the full path to your &lt;code&gt;python3&lt;/code&gt;
installation. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/postgrestest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/postgrestest/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can install the psycopg2 Python package from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; using the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install psycopg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/pip-install-psycopg2.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we've got our PostgreSQL driver installed in our virtualenv! We can 
now test out the installation by writing a few lines of Python code.&lt;/p&gt;
&lt;h2&gt;Using PostgreSQL from Python&lt;/h2&gt;
&lt;p&gt;Launch the Python REPL with the &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt; command. You can also 
write the following code in a Python file such as "testpostgres.py" then
execute it with &lt;code&gt;python testpostgres.py&lt;/code&gt;. Make sure to replace the "user"
and "password" values with your own.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;connect_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dbname=&amp;#39;testpython&amp;#39; user=&amp;#39;matt&amp;#39; host=&amp;#39;localhost&amp;#39; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                  &lt;span class="s"&gt;&amp;quot;password=&amp;#39;myOwnPassword&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# use our connection values to establish a connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# create a psycopg2 cursor that can execute queries&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# create a new table with a single column called &amp;quot;name&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;CREATE TABLE tutorials (name char(40));&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# run a SELECT statement - no data in there, but we can try it&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT * from tutorials&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Uh oh, can&amp;#39;t connect. Invalid dbname, user or password?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run the above code we won't get anything fancy, just an empty
list printed out. However, in those few lines of code we've ensured our 
connection to our new database works and we can create new tables in it as 
well as query them.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160518-postgresql-ubuntu-1604/output.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That's just enough of a hook to get started writing more complicated SQL 
queries using psycopg2 and PostgreSQL. Make sure to check out the 
&lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt;,
&lt;a href="/databases.html"&gt;relational databases&lt;/a&gt; and 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt;
pages for more tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. 
Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160518-install-postgresql-python-3-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-18:postgresql-python-3-psycopg2-ubuntu-1604.html</guid></item><item><title>How to Use Redis with Python 3 and redis-py on Ubuntu 16.04</title><link>https://www.fullstackpython.com/install-redis-use-python-3-ubuntu-1604.html</link><description>&lt;p&gt;&lt;a href="/redis.html"&gt;Redis&lt;/a&gt; is an in-memory key-value pair 
&lt;a href="/no-sql-datastore.html"&gt;NoSQL data store&lt;/a&gt; often used 
for &lt;a href="/web-frameworks.html"&gt;web application&lt;/a&gt; sessions,
transient &lt;a href="/data.html"&gt;data&lt;/a&gt; and as a broker for 
&lt;a href="/task-queues.html"&gt;task queues&lt;/a&gt;. redis-py is a common Python code 
library for interacting with Redis. Let's learn how to get Redis up
and running on &lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; and then start using it in a simple 
Python application.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This tutorial is tested with Python 3.5 but either 
&lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; should work for everything written 
here. Just make sure one version is installed on your system by going to 
the terminal and typing &lt;code&gt;python --version&lt;/code&gt;. Other than Python itself,
here is the software we are going to use throughout the rest of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04&lt;/a&gt; (these 
  instructions should work fine with earlier Ubuntu versions as well)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle the
  redis-py &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://redis.io"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis-py.readthedocs.io/en/latest/"&gt;redis-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren't sure how how to install pip and virtualenv, review the 
first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Install Redis&lt;/h2&gt;
&lt;p&gt;There are a few ways to install Redis, such as 
&lt;a href="http://redis.io/topics/quickstart"&gt;downloading and compiling from source&lt;/a&gt;.
However, on Ubuntu we can install a system package through &lt;code&gt;apt&lt;/code&gt;. The
advantage of this method is that the &lt;code&gt;apt&lt;/code&gt; process will take care of 
installing &lt;code&gt;redis-server&lt;/code&gt; as a system service. Open the terminal and run 
the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install redis-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your &lt;code&gt;sudo&lt;/code&gt; password and when you are prompted whether you want 
to install the new package enter 'yes'.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160516-redis-ubuntu-1604/apt-get-redis.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;After a few moments the downloading and processing should be complete
and you will be back at the prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160516-redis-ubuntu-1604/apt-get-redis-done.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Redis is now installed and the Redis server is running in the background 
as a system service. Even though we installed the &lt;code&gt;redis-server&lt;/code&gt; package,
the installation also comes with the Redis command line client. The client
is useful for connecting directly to the Redis server without any Python
code. Give &lt;code&gt;redis-cli&lt;/code&gt; a try by typing this into the command prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;redis-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Redis client connects to the localhost server and gives a new prompt
to show it's ready for commands:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160516-redis-ubuntu-1604/redis-cli.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Give the prompt a try by using Redis commands such as &lt;code&gt;keys *&lt;/code&gt; or &lt;code&gt;set a 1&lt;/code&gt;.
The full list of Redis commands is provided in the 
&lt;a href="http://redis.io/commands"&gt;project documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Virtualenv and Install redis-py&lt;/h2&gt;
&lt;p&gt;We need to figure out our &lt;code&gt;python3&lt;/code&gt; location, then create a virtualenv,
activate the virtualenv and then install redis-py with &lt;code&gt;pip&lt;/code&gt;.
Determine your &lt;code&gt;python3&lt;/code&gt; executable location with the &lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see some output like the following screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160516-redis-ubuntu-1604/which-python-3.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new virtualenv either in your home directory or wherever you
store your project virtualenvs. Specify the full path to your &lt;code&gt;python3&lt;/code&gt;
installation. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/redistest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/redistest/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can install the redis-py Python package from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; using the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install redis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160516-redis-ubuntu-1604/pip-install-redis.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Alright, now it is installed in our virtualenv. Let's write some simple 
Python code to try out give redis-py!&lt;/p&gt;
&lt;h2&gt;Working with Redis from Python&lt;/h2&gt;
&lt;p&gt;Fire up the Python REPL with the &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt; command. You can also 
write the following code in a Python file such as "testredis.py" then
execute it with &lt;code&gt;python testredis.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="c"&gt;# create a connection to the localhost Redis server instance, by&lt;/span&gt;
&lt;span class="c"&gt;# default it runs on port 6379&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# see what keys are in Redis&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# output for keys() should be an empty list &amp;quot;[]&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;full stack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# output should be &amp;quot;True&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# now we have one key so the output will be &amp;quot;[b&amp;#39;full stack&amp;#39;]&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;full stack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# output is &amp;quot;b&amp;#39;python&amp;#39;&amp;quot;, the key and value still exist in Redis&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# output is &amp;quot;1&amp;quot;, we just incremented even though the key did not&lt;/span&gt;
&lt;span class="c"&gt;# previously exist&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# output is &amp;quot;b&amp;#39;1&amp;#39;&amp;quot; again, since we just obtained the value from&lt;/span&gt;
&lt;span class="c"&gt;# the existing key&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# output is &amp;quot;1&amp;quot; because the command was successful&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# nothing is returned because the key and value no longer exist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is a quick introduction to some commonly-used Redis commands
invoked by their Python bindings through the redis-py library. Take a look 
at the 
&lt;a href="https://redis-py.readthedocs.io/en/latest/"&gt;redis-py official documentation&lt;/a&gt;
to learn more about the extensive command list you can use to create,
read, modify and delete keys and values in Redis.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. 
Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160516-install-redis-use-python-3-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-16:install-redis-use-python-3-ubuntu-1604.html</guid></item><item><title>How to Send MMS Picture Messages with Python</title><link>https://www.fullstackpython.com/send-mms-picture-messages-python.html</link><description>&lt;p&gt;Multimedia Message Service (MMS) picture and video messages are a common 
extension to the Short Message Service (SMS) system for sending text 
messages. Using a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;
with Python makes it easy to send MMS messages from a web application or
script. In this short tutorial we'll learn how to add MMS sending capability
to a new or existing Python application.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; works for the code in this 
tutorial. Just make sure you have one of those two versions installed on 
your system by going to the terminal and typing &lt;code&gt;python --version&lt;/code&gt;.
The other dependencies for this tutorial include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; version &lt;a href="/python-2-or-3.html"&gt;2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle one
  &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;MMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are unsure of how to get pip and virtualenv installed, take a look
at the first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Twilio Web API&lt;/h2&gt;
&lt;p&gt;Our simple Python example application will use the Twilio web API to send
picture messages.
Go to the Twilio website
&lt;a href="https://www.twilio.com/try-twilio"&gt;sign up for a free trial account&lt;/a&gt;. If 
you already have a Twilio account (and you should because it makes it easy to
add almost any type of communications to applications!) then sign into 
your existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160515-mms-python/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;In trial mode Twilio can send MMS to a validated phone number associated with
the account. When you're ready to send MMS messages to any phone in any 
country then you will have to upgrade your account.&lt;/p&gt;
&lt;p&gt;After signing up for a Twilio account, you will receive your own phone 
number that'll be used to send messages. That phone number can send outbound
MMS messages without any configuration. It can also receive messages but 
that requires 
&lt;a href="https://www.twilio.com/docs/quickstart/python/sms/hello-monkey"&gt;modifying the Request URL webhook&lt;/a&gt; 
in the phone number details screen.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependency&lt;/h2&gt;
&lt;p&gt;We'll use the &lt;a href="https://pypi.python.org/pypi/twilio"&gt;twilio helper library&lt;/a&gt; 
as a dependency for our Python code. The helper library can be installed
via the &lt;code&gt;pip&lt;/code&gt; command, which pulls the code from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into our local virtualenv. In this
tutorial we'll call our virtualenv &lt;code&gt;pymms&lt;/code&gt; but you can name it whatever
you want for your application.&lt;/p&gt;
&lt;p&gt;We have to create the virtualenv before using it. In your terminal enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv pymms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to install virtualenv take a look at the
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Django and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;p&gt;Activate the virtualenv with the &lt;code&gt;source&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source pymms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change to look like this after it is activated:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160515-mms-python/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now install the Twilio Python helper library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the helper library installs we can use it in our Python code.&lt;/p&gt;
&lt;h2&gt;Sending MMS From Python&lt;/h2&gt;
&lt;p&gt;Launch the the Python interpreter by executing the &lt;code&gt;python&lt;/code&gt; command in
your terminal. You can also create a new file named &lt;code&gt;send_mms.py&lt;/code&gt; if you
want to re-use the code after we give it a try. &lt;/p&gt;
&lt;p&gt;We need to grab our account credentials from the Twilio Console to connect 
our Python code to our Twilio account. Go to the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt; and copy the Account SID
and Authentication Token into your Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160515-mms-python/console-tokens.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter the following code into the interpreter or into the new Python file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we import the Twilio client from the dependency we just installed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;

&lt;span class="c"&gt;# the following line needs your Twilio Account SID and Auth Token&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ACxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zzzzzzzzzzzzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# this is the URL to an image file we&amp;#39;re going to send in the MMS&lt;/span&gt;
&lt;span class="n"&gt;media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.mattmakai.com/source/static/img/work/fsp-logo.png&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# change the &amp;quot;from_&amp;quot; number to your Twilio number and the &amp;quot;to&amp;quot; number&lt;/span&gt;
&lt;span class="c"&gt;# to the phone number you signed up for Twilio with, or upgrade your&lt;/span&gt;
&lt;span class="c"&gt;# account to send MMS to any phone number that MMS is available&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+19732644152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+12023358536&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                       &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MMS via Python? Nice!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the lines above that start with &lt;code&gt;#&lt;/code&gt; are comments to give you some
context for what each line is doing. After entering that code into the
interpreter or running the Python script with &lt;code&gt;python send_mms.py&lt;/code&gt;
Twilio will send your MMS.&lt;/p&gt;
&lt;p&gt;In a few seconds you should see a message appear on your phone - note that
MMS can take a little longer because your phone has to download the image. 
I use an iPhone so here is what the message looked like when I received it:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160515-mms-python/mms-result.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That is everything need to send MMS to a phone. Pretty awesome result for 
a few lines of Python code, right? This code can be added to any Python 
program to send outbound MMS.&lt;/p&gt;
&lt;p&gt;One final note: keep your Twilio Auth Token secret otherwise anyone who
gets it will be able to send and receive messages through your account.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160515-sending-mms-picture-messages-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-15:send-mms-picture-messages-python.html</guid></item><item><title>Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS</title><link>https://www.fullstackpython.com/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;The &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04 Long Term Support (LTS)&lt;/a&gt; Linux
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; was released in April 2016.
This latest Ubuntu release is named "Xenial Xerus" and
it is the first Ubuntu release to include &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt;,
instead of Python 2.x, as the default Python installation.&lt;/p&gt;
&lt;p&gt;We can quickly start a new &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web application project 
and run it with &lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; on
Ubuntu 16.04.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our setup requires the Ubuntu 16.04 release along with a few other code 
libraries. Don't install these tools just yet since we'll get to them as 
we go through the walkthrough. Our requirements and their current versions 
as of May 13, 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5&lt;/a&gt; 
  (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework version 
  &lt;a href="http://bottlepy.org/docs/0.12/"&gt;0.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are developing on Mac OS X or Windows, make sure to use 
virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. I use the amd64 version for my own local 
development.&lt;/p&gt;
&lt;p&gt;A desktop screen like this one appears when you boot up Ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal window to install the system packages.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 system version Ubuntu comes with and where its
executable is stored using these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages. We will get prompted 
for the superuser password because restricted system access is needed 
to install packages through 
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install virtualenv python-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to let the system package installation process do its job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;In the previous section, &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; were installed to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Bottle and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory for the virtualenvs. Then create a new virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/bottleproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/bottleproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtualenv.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install whatever
dependencies we want, in our case Bottle and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Bottle and Gunicorn&lt;/h2&gt;
&lt;p&gt;We can now install Bottle and Green Unicorn via the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install bottle gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors like we see in the following screenshot is a good sign.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;mkdir&lt;/code&gt; command to create a new directory to keep our Bottle 
project then use the &lt;code&gt;cd&lt;/code&gt; (change directory) command to move into the
new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/bottleproj
cd ~/bottleproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;app.py&lt;/code&gt; within our &lt;code&gt;bottleproj&lt;/code&gt; directory so
we can test to make sure Bottle is working properly. I prefer to use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within the new &lt;code&gt;app.py&lt;/code&gt; file write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="c"&gt;# a basic URL route to test whether Bottle is responding properly&lt;/span&gt;
&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# these two lines are only used for python app.py&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# this is the hook for Gunicorn to run Bottle&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Bottle development server using the 
&lt;code&gt;python app.py&lt;/code&gt; command. Let's instead run our Bottle app with
Gunicorn.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn -w 2 app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we can bring up our shell Bottle app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160513-ubuntu-bottle-gunicorn/it-works.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Time to develop a full-fledged web application with &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Now you have a simple setup to develop Bottle web apps using Gunicorn as
the &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt; on Ubuntu 16.04. If you need a
full step-by-step tutorial to deploy your Python web application to a
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To decide what to do next with your Python project, check out the
&lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160513-bottle-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-13:python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>How to Send SMS Text Messages with Python</title><link>https://www.fullstackpython.com/send-sms-text-messages-python.html</link><description>&lt;p&gt;Short Message Service (SMS) text messages are ubiquitous for communication
all over the world. It is easy to send SMS text messages from a 
&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; application using a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;. 
Let's take a look at the tools we need to quickly add SMS capability to our
Python apps.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This guide works with both Python 2 and 3, so make sure you have one of those
two versions installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.python.org/pypi/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need assistance getting pip and virtualenv installed, check out the
first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide that'll show how to install system packages for those tools.&lt;/p&gt;
&lt;h2&gt;Using a Web API&lt;/h2&gt;
&lt;p&gt;We're going to use a web API to make sending SMS easier and more reliable.
Head to the 
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free trial account&lt;/a&gt;. If you already have a Twilio account (and you should - it's awesome
for more than just sending text messages!) then sign into your existing
account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send text messages to your own 
validated phone number.  When you want to send SMS to any phone number in 
your country or other countries then you can upgrade your account to send 
messages for fractions of a cent.&lt;/p&gt;
&lt;p&gt;After signing up, you will get a free phone number in your country. We can
use that phone number without any configuration to send outbound text 
messsages. You can also receive text messages but that requires changing
the Request URL webhook in the phone number configuration screen - we'll
cover that in a future blog post.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependency&lt;/h2&gt;
&lt;p&gt;Our code will use a helper library to make it easier to send text messages
from Python. We are going to install the helper library from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. First we need to
create the virtualenv. In your terminal use the following command to create
a new virtualenv. If you need to install virtualenv take a look at the
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv sendsms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source sendsms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after we properly activate the virtualenv
to something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now install the Twilio Python helper library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The helper library is now installed and we can use it with the Python code 
we create and execute.&lt;/p&gt;
&lt;h2&gt;Sending SMS From Python&lt;/h2&gt;
&lt;p&gt;Fire up the Python interpreter in the terminal using the &lt;code&gt;python&lt;/code&gt; command,
or create a new file named &lt;code&gt;send_sms.py&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;We need to grab our account credentials from the Twilio Console to connect 
our Python code to our Twilio account. Go to the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt; and copy the Account SID
and Authentication Token into your Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/console-tokens.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter the following code into the interpreter or into the new Python file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we import the Twilio client from the dependency we just installed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;

&lt;span class="c"&gt;# the following line needs your Twilio Account SID and Auth Token&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ACxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zzzzzzzzzzzzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# change the &amp;quot;from_&amp;quot; number to your Twilio number and the &amp;quot;to&amp;quot; number&lt;/span&gt;
&lt;span class="c"&gt;# to the phone number you signed up for Twilio with, or upgrade your&lt;/span&gt;
&lt;span class="c"&gt;# account to send SMS to any phone number&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+19732644152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+12023358536&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                       &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello from Python!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the lines above that start with &lt;code&gt;#&lt;/code&gt; are comments. Once you enter that 
code into the interpreter or run the Python script using 
&lt;code&gt;python send_sms.py&lt;/code&gt; the SMS will be sent.&lt;/p&gt;
&lt;p&gt;In a few seconds you should see a message appear on your phone. I'm on
iOS so here's how the text message I received looked.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/hello-from-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That's it! You can add this code to any Python code to send text messages.
Just keep your Auth Token secret as it'll allow anyone that has it to use
your account to send and receive messages.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160511-send-sms-text-message-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-11:send-sms-text-messages-python.html</guid></item><item><title>How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</title><link>https://www.fullstackpython.com/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt;'s latest Long Term Support (LTS) 
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; was released last month, in 
April 2016. The 16.04 update for Ubuntu is known as "Xenial Xerus" and
it's the first Ubuntu release to include &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; 
as the default Python installation.&lt;/p&gt;
&lt;p&gt;We can use this new Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;We'll need the Ubuntu 16.04 release along with a few other libraries to 
complete our project. You don't have to install these tools just yet, 
we will get to them as we progress through the walkthrough. Our requirements
and their current versions as of May 10, 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5&lt;/a&gt; 
  (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework version 
  &lt;a href="http://flask.pocoo.org/docs/0.10/"&gt;0.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're running on Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. I'm using amd64 for development and testing
in this tutorial.&lt;/p&gt;
&lt;p&gt;Once you boot up Ubuntu, you should see a screen like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up a terminal window to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 system version Ubuntu comes with and where its
executable is stored using these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages. We will get prompted 
for the superuser password because restricted system access is needed 
to install packages through 
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install virtualenv python-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to let the system package installation process do its job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;In the previous section, &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; were installed to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Flask and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory for the virtualenvs. Then create a new virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/flaskproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtualenv.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install whatever
dependencies we want, in our case Flask and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Flask and Gunicorn&lt;/h2&gt;
&lt;p&gt;We can finally install Flask and Green Unicorn via the pip command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install flask gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's a good sign if we receive no errors like we see in the following 
screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new directory under our home directory that will store our
Flask project. Change directory into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/flaskproj
cd ~/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;__init__.py&lt;/code&gt; within our &lt;code&gt;flaskproj&lt;/code&gt; directory so
we can test to make sure Flask is working properly. I prefer to use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;__init__.py&lt;/code&gt; write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Flask development server using the 
&lt;code&gt;python __init__.py&lt;/code&gt; command. Instead run the Flask app with
Gunicorn. Go to the directory above the &lt;code&gt;flaskproj&lt;/code&gt; folder, in our
case we can enter &lt;code&gt;cd ~&lt;/code&gt; then use the &lt;code&gt;gunicorn&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn flaskproj:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we can bring up our shell Flask app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/it-works.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now ready for some real &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;That's a simple setup for developing with Flask and Gunicorn on 
Ubuntu 16.04. If you need an in-depth step-by-step tutorial to 
deploy your &lt;a href="/wsgi-servers.html"&gt;WSGI-powered web application&lt;/a&gt; to a 
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To determine what to code next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160510-flask-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-10:python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS</title><link>https://www.fullstackpython.com/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; released the newest Long Term Support (LTS) 
version of its &lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; in April 2016. 
The update brings Ubuntu to version 16.04 and its latest code name is 
"Xenial Xerus". 16.04 is the first Ubuntu release to include 
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; as the default Python installation.&lt;/p&gt;
&lt;p&gt;Let's use this newest Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/django.html"&gt;Django&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;We will need a few tools to complete our project. Don't worry about 
installing these just yet as we'll get to them as we progress through the
tutorial. The tools and their current versions as of May 9, 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5&lt;/a&gt; 
  (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework version 
  &lt;a href="https://docs.djangoproject.com/en/1.9/releases/1.9/"&gt;1.9.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; 
(this is what I use, but it's Mac OS X-only) or 
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine, but I use amd64 for development and testing
in this blog post.&lt;/p&gt;
&lt;p&gt;When we boot up for the first time, we should see a desktop screen like this 
one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up terminal to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 version Ubuntu comes with, as well as where its
executable is stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation first needs system packages for Python development.
You'll be prompted for your superuser password because restricted system
access is required to install packages through apt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install virtualenv python-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; and let the system package installation process run.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The basic system packages we need are now installed so we can proceed to
our Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;Virtualenv and pip for isolating and handling 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; were just 
installed via system packages so we can now use them to obtain Django and 
Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory to store virtualenvs then put a new virtualenv in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/djproject/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see our prompt change so that we know the virtualenv is properly 
activated.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv with Python 3 is activated so we can install whatever
dependencies we want, such as Django and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Django and Gunicorn&lt;/h2&gt;
&lt;p&gt;Time to install Django and Green Unicorn into our virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors is a good sign everything worked for us.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new Django project named &lt;code&gt;djproject&lt;/code&gt;, or whatever you want to name
your project. Then change into the directory for the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django-admin startproject djproject
cd djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run Django with the development server using the 
&lt;code&gt;python manage.py runserver&lt;/code&gt; command. However, start Django up with
Gunicorn instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn djproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we can bring up our shell project in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/it-worked.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Ready for development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Those are the basics for starting development with Django and Gunicorn on 
Ubuntu 16.04. If you need an even more in-depth step-by-step tutorial to 
deploy your Python web application to a production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To figure out what to do next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/gh-pages/source/content/posts/160509-django-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-09:python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>The Full Stack Python Blog</title><link>https://www.fullstackpython.com/full-stack-python-blog.html</link><description>&lt;p&gt;Full Stack Python began way back in December 2012 when I started writing
the initial &lt;a href="/deployment.html"&gt;deployment&lt;/a&gt;, &lt;a href="/servers.html"&gt;server&lt;/a&gt;, 
operating system, web server and WSGI server pages. Since then, the pages
have expanded out into a 
&lt;a href="/table-of-contents.html"&gt;boatload of other areas&lt;/a&gt;
including subjects outside the deployment topics I originally started the
site to explain.&lt;/p&gt;
&lt;p&gt;Frequently though I wanted to write a Python walkthrough that was not a
good fit for the page format I use for each topic. Many of those walkthroughs
became &lt;a href="https://www.twilio.com/blog/author/mmakai"&gt;Twilio blog posts&lt;/a&gt;
but not all of them were quite the right fit on there. I'll still be writing
plenty more &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; tutorials, but this 
&lt;a href="/blog.html"&gt;Full Stack Python blog&lt;/a&gt; is the spot for technical posts that 
fall outside the Twilio domain.&lt;/p&gt;
&lt;p&gt;Let me know what you think and what tutorials you'd like to see in the future. 
Hit me up on Twitter &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Sat, 18 Feb 2017 00:00:00 -0500</pubDate><guid>tag:www.fullstackpython.com,2016-05-08:full-stack-python-blog.html</guid></item></channel></rss>